import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { apiService } from '../../services/api';
import './Dashboard.css';

function Dashboard({ spills, onSpillSelect, onCreate }) {
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    totalSpills: 0,
    activeSpills: 0,
    totalVolume: 0,
    criticalSpills: 0
  });
  const [recentActivity, setRecentActivity] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    calculateStats();
  }, [spills]);

  const calculateStats = () => {
    const activeSpills = spills.filter(spill => spill.status === 'ACTIVE');
    const criticalSpills = spills.filter(spill => 
      spill.volume > 10000 || spill.chemicalType.toLowerCase().includes('toxic') || 
      spill.chemicalType.toLowerCase().includes('hazard') ||
      spill.priority === 'HIGH' || spill.priority === 'CRITICAL'
    );
    const totalVolume = spills.reduce((sum, spill) => sum + (spill.volume || 0), 0);

    setStats({
      totalSpills: spills.length,
      activeSpills: activeSpills.length,
      totalVolume,
      criticalSpills: criticalSpills.length
    });

    // Create recent activity log
    const activity = spills
      .sort((a, b) => new Date(b.spillTime) - new Date(a.spillTime))
      .slice(0, 8)
      .map(spill => ({
        id: spill.id,
        message: `${spill.name || 'Unnamed Incident'} - ${spill.chemicalType} (${(spill.volume || 0).toLocaleString()}L)`,
        time: spill.spillTime,
        type: spill.status,
        spill: spill
      }));
    
    setRecentActivity(activity);
  };

  const handleReportIncident = () => {
    navigate('/spill');
  };

  const handleGenerateReport = async () => {
    setLoading(true);
    try {
      // Generate comprehensive report
      const reportData = {
        timestamp: new Date().toISOString(),
        totalIncidents: stats.totalSpills,
        activeIncidents: stats.activeSpills,
        criticalIncidents: stats.criticalSpills,
        totalVolume: stats.totalVolume,
        incidents: spills.map(spill => ({
          id: spill.id,
          name: spill.name,
          chemical: spill.chemicalType,
          volume: spill.volume,
          location: `${parseFloat(spill.latitude).toFixed(4)}, ${parseFloat(spill.longitude).toFixed(4)}`,
          status: spill.status,
          reportTime: spill.spillTime,
          priority: spill.priority || 'MEDIUM'
        }))
      };

      // Create downloadable report
      const reportContent = generateReportContent(reportData);
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `spill-report-${new Date().toISOString().split('T')[0]}.txt`;
      a.click();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Failed to generate report');
    } finally {
      setLoading(false);
    }
  };

  const generateReportContent = (data) => {
    return `
CHEMICAL SPILL INCIDENT REPORT
Generated: ${new Date(data.timestamp).toLocaleString()}
=====================================

SUMMARY STATISTICS
------------------
Total Incidents: ${data.totalIncidents}
Active Incidents: ${data.activeIncidents}
Critical Level Incidents: ${data.criticalIncidents}
Total Volume Spilled: ${data.totalVolume.toLocaleString()} Liters

INCIDENT DETAILS
----------------
${data.incidents.map((incident, index) => `
${index + 1}. ${incident.name || 'Unnamed Incident'}
   Chemical: ${incident.chemical}
   Volume: ${(incident.volume || 0).toLocaleString()} L
   Location: ${incident.location}
   Status: ${incident.status}
   Priority: ${incident.priority}
   Reported: ${new Date(incident.reportTime).toLocaleString()}
`).join('\n')}

RECOMMENDATIONS
---------------
${data.criticalIncidents > 0 ? `‚ö†Ô∏è  URGENT: ${data.criticalIncidents} critical incidents require immediate attention` : '‚úÖ No critical incidents at this time'}
${data.activeIncidents > 5 ? `‚ö†Ô∏è  High incident volume: ${data.activeIncidents} active incidents` : ''}
${data.totalVolume > 50000 ? `‚ö†Ô∏è  Large total volume: ${data.totalVolume.toLocaleString()} L total spillage` : ''}

Report generated by Water Dispersion Monitor System
    `.trim();
  };

  const handleViewAllOnMap = () => {
    navigate('/map');
  };

  const handleMarkAsContained = async (spillId) => {
    if (!spillId) return;
    
    try {
      setLoading(true);
      await apiService.updateSpillStatus(spillId, 'CONTAINED');
      // Refresh data
      window.location.reload();
    } catch (error) {
      console.error('Error updating spill status:', error);
      alert('Failed to update spill status');
    } finally {
      setLoading(false);
    }
  };

  const handleEmergencyAlert = () => {
    const criticalSpills = spills.filter(spill => 
      spill.volume > 10000 || spill.chemicalType.toLowerCase().includes('toxic')
    );
    
    if (criticalSpills.length === 0) {
      alert('No critical incidents requiring emergency alert at this time.');
      return;
    }

    const alertMessage = `üö® EMERGENCY ALERT üö®\n\n${criticalSpills.length} critical incident(s) detected:\n\n${
      criticalSpills.map(spill => 
        `‚Ä¢ ${spill.name}: ${spill.chemicalType} (${spill.volume.toLocaleString()}L)\n  Location: ${parseFloat(spill.latitude).toFixed(4)}, ${parseFloat(spill.longitude).toFixed(4)}`
      ).join('\n\n')
    }\n\nImmediate response required!`;
    
    alert(alertMessage);
  };

  const handleStatClick = (statType) => {
    switch (statType) {
      case 'total':
        // Show all incidents
        navigate('/dashboard');
        break;
      case 'active':
        // Filter to show only active
        navigate('/map', { state: { filter: 'active' } });
        break;
      case 'volume':
        // Show volume analysis
        navigate('/weather');
        break;
      case 'critical':
        // Show critical incidents
        navigate('/map', { state: { filter: 'critical' } });
        break;
      default:
        break;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'ACTIVE': return '#dc2626';
      case 'CONTAINED': return '#d97706';
      case 'CLEANED': return '#059669';
      case 'ARCHIVED': return '#6b7280';
      default: return '#6b7280';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'CRITICAL': return '#dc2626';
      case 'HIGH': return '#ea580c';
      case 'MEDIUM': return '#d97706';
      case 'LOW': return '#65a30d';
      default: return '#6b7280';
    }
  };

  return (
    <div className="dashboard-container">
      {/* Header */}
      <div className="dashboard-header">
        <div className="header-content">
          <h1>Emergency Response Dashboard</h1>
          <p>Real-time monitoring of chemical spills and dispersion modeling</p>
        </div>
        <div className="header-actions">
          <button 
            className="btn btn-primary btn-lg"
            onClick={handleReportIncident}
          >
            üö® Report New Incident
          </button>
        </div>
      </div>

      {/* Statistics Grid */}
      <div className="stats-grid">
        <div 
          className="stat-card clickable"
          onClick={() => handleStatClick('total')}
        >
          <div className="stat-icon">üìä</div>
          <div className="stat-content">
            <h3>{stats.totalSpills}</h3>
            <p>Total Incidents</p>
          </div>
        </div>

        <div 
          className="stat-card clickable critical"
          onClick={() => handleStatClick('active')}
        >
          <div className="stat-icon">üî•</div>
          <div className="stat-content">
            <h3>{stats.activeSpills}</h3>
            <p>Active Spills</p>
          </div>
        </div>

        <div 
          className="stat-card clickable warning"
          onClick={() => handleStatClick('volume')}
        >
          <div className="stat-icon">üíß</div>
          <div className="stat-content">
            <h3>{stats.totalVolume.toLocaleString()}L</h3>
            <p>Total Volume</p>
          </div>
        </div>

        <div 
          className="stat-card clickable danger"
          onClick={() => handleStatClick('critical')}
        >
          <div className="stat-icon">‚ö†Ô∏è</div>
          <div className="stat-content">
            <h3>{stats.criticalSpills}</h3>
            <p>Critical Level</p>
          </div>
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="main-grid">
        {/* Active Spills */}
        <div className="content-card">
          <div className="card-header">
            <h2>Active Incidents ({spills.length})</h2>
            <button 
              className="btn btn-secondary btn-sm"
              onClick={handleViewAllOnMap}
            >
              View on Map
            </button>
          </div>
          <div className="card-content">
            {spills.length > 0 ? (
              <div className="spills-list">
                {spills.slice(0, 6).map(spill => (
                  <div 
                    key={spill.id}
                    className="spill-item"
                    onClick={() => onSpillSelect(spill)}
                  >
                    <div className="spill-header">
                      <h4>{spill.name || 'Unnamed Incident'}</h4>
                      <div className="spill-badges">
                        <span 
                          className="status-badge"
                          style={{ backgroundColor: getStatusColor(spill.status) }}
                        >
                          {spill.status}
                        </span>
                        {spill.priority && (
                          <span 
                            className="priority-badge"
                            style={{ backgroundColor: getPriorityColor(spill.priority) }}
                          >
                            {spill.priority}
                          </span>
                        )}
                      </div>
                    </div>
                    <div className="spill-details">
                      <div className="detail-row">
                        <span className="detail-label">Chemical:</span>
                        <span className="detail-value">{spill.chemicalType}</span>
                      </div>
                      <div className="detail-row">
                        <span className="detail-label">Volume:</span>
                        <span className="detail-value">{(spill.volume || 0).toLocaleString()} L</span>
                      </div>
                      <div className="detail-row">
                        <span className="detail-label">Location:</span>
                        <span className="detail-value">
                          {parseFloat(spill.latitude).toFixed(4)}, {parseFloat(spill.longitude).toFixed(4)}
                        </span>
                      </div>
                      <div className="detail-row">
                        <span className="detail-label">Time:</span>
                        <span className="detail-value">{new Date(spill.spillTime).toLocaleString()}</span>
                      </div>
                    </div>
                    <div className="spill-actions">
                      {spill.status === 'ACTIVE' && (
                        <button 
                          className="btn btn-success btn-sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleMarkAsContained(spill.id);
                          }}
                        >
                          Mark Contained
                        </button>
                      )}
                      <button 
                        className="btn btn-primary btn-sm"
                        onClick={(e) => {
                          e.stopPropagation();
                          onSpillSelect(spill);
                          navigate('/map');
                        }}
                      >
                        View Details
                      </button>
                    </div>
                  </div>
                ))}
                {spills.length > 6 && (
                  <div className="view-more">
                    <button 
                      className="btn btn-outline"
                      onClick={handleViewAllOnMap}
                    >
                      View All {spills.length} Incidents
                    </button>
                  </div>
                )}
              </div>
            ) : (
              <div className="empty-state">
                <div className="empty-icon">üìç</div>
                <p>No active incidents</p>
                <small>Click "Report New Incident" to begin</small>
                <button 
                  className="btn btn-primary"
                  onClick={handleReportIncident}
                >
                  Report First Incident
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Recent Activity */}
        <div className="content-card">
          <div className="card-header">
            <h2>Recent Activity</h2>
          </div>
          <div className="card-content">
            {recentActivity.length > 0 ? (
              <div className="activity-list">
                {recentActivity.map((activity, index) => (
                  <div 
                    key={`${activity.id}-${index}`}
                    className="activity-item"
                    style={{ borderLeftColor: getStatusColor(activity.type) }}
                    onClick={() => onSpillSelect(activity.spill)}
                  >
                    <div className="activity-content">
                      <p className="activity-message">{activity.message}</p>
                      <p className="activity-time">{new Date(activity.time).toLocaleString()}</p>
                    </div>
                    <div className="activity-status">
                      <span 
                        className="status-dot"
                        style={{ backgroundColor: getStatusColor(activity.type) }}
                      ></span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="empty-state">
                <div className="empty-icon">üìù</div>
                <p>No recent activity</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="quick-actions-section">
        <div className="content-card">
          <div className="card-header">
            <h2>Quick Actions</h2>
          </div>
          <div className="card-content">
            <div className="actions-grid">
              <button 
                className="action-btn primary"
                onClick={handleReportIncident}
                disabled={loading}
              >
                <div className="action-icon">üö®</div>
                <div className="action-content">
                  <h4>Report Incident</h4>
                  <p>Report new chemical spill</p>
                </div>
              </button>

              <button 
                className="action-btn secondary"
                onClick={handleGenerateReport}
                disabled={loading}
              >
                <div className="action-icon">üìä</div>
                <div className="action-content">
                  <h4>Generate Report</h4>
                  <p>Download incident summary</p>
                </div>
              </button>

              <button 
                className="action-btn secondary"
                onClick={handleViewAllOnMap}
              >
                <div className="action-icon">üó∫Ô∏è</div>
                <div className="action-content">
                  <h4>View on Map</h4>
                  <p>Interactive map view</p>
                </div>
              </button>

              <button 
                className="action-btn success"
                onClick={() => {
                  const activeSpills = spills.filter(s => s.status === 'ACTIVE');
                  if (activeSpills.length > 0) {
                    handleMarkAsContained(activeSpills[0].id);
                  } else {
                    alert('No active spills to mark as contained');
                  }
                }}
                disabled={loading || stats.activeSpills === 0}
              >
                <div className="action-icon">‚úÖ</div>
                <div className="action-content">
                  <h4>Mark Contained</h4>
                  <p>Update spill status</p>
                </div>
              </button>

              <button 
                className="action-btn warning"
                onClick={() => navigate('/weather')}
              >
                <div className="action-icon">üå¶Ô∏è</div>
                <div className="action-content">
                  <h4>Weather Data</h4>
                  <p>Current conditions</p>
                </div>
              </button>

              <button 
                className="action-btn danger"
                onClick={handleEmergencyAlert}
                disabled={stats.criticalSpills === 0}
              >
                <div className="action-icon">üö®</div>
                <div className="action-content">
                  <h4>Emergency Alert</h4>
                  <p>Send critical notification</p>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>

      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner"></div>
          <p>Processing...</p>
        </div>
      )}
    </div>
  );
}

export default Dashboard;