{"ast":null,"code":"import axios from 'axios';\n\n// Change baseURL from '/api/v1' to '/api' to match your Spring Boot configuration\nconst api = axios.create({\n  baseURL: '/api',\n  // Removed /v1 to match your server.servlet.context-path=/api\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`🚀 ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.data || config.params);\n  return config;\n}, error => {\n  console.error('❌ Request Error:', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  var _response$config$meth;\n  console.log(`✅ ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response4;\n  console.error('❌ Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    throw new Error('Resource not found');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 400) {\n    throw new Error(error.response.data.message || 'Invalid request');\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 500) {\n    throw new Error('Server error occurred');\n  } else if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout - please try again');\n  }\n  throw error;\n});\nexport const apiService = {\n  // Spill Endpoints\n  async getAllSpills() {\n    // This endpoint returns all spills, active or contained.\n    return await api.get('/dispersion/spills/all');\n  },\n  async getActiveSpills() {\n    return await api.get('/dispersion/spills');\n  },\n  async createSpill(spillData) {\n    return await api.post('/dispersion/spills', spillData);\n  },\n  async updateSpillStatus(spillId, status) {\n    return await api.put(`/dispersion/spills/${spillId}/status`, null, {\n      params: {\n        status\n      }\n    });\n  },\n  // Weather Endpoints\n  async getCurrentWeather(latitude, longitude) {\n    return await api.get('/weather/current', {\n      params: {\n        latitude,\n        longitude\n      }\n    });\n  },\n  // Tide Endpoints\n  async getTideForecast(latitude, longitude, hours) {\n    return await api.get('/tides/forecast', {\n      params: {\n        latitude,\n        longitude,\n        hours\n      }\n    });\n  },\n  // Real-time updates endpoint\n  subscribeToUpdates(onUpdate) {\n    // Correct URL to use relative path without repeating /api\n    const eventSource = new EventSource('/api/real-time-updates');\n    eventSource.onmessage = event => {\n      onUpdate(JSON.parse(event.data));\n    };\n    eventSource.onerror = error => {\n      console.error('EventSource failed:', error);\n      eventSource.close();\n    };\n    return () => eventSource.close();\n  },\n  // Other utility functions (keep these at the end)\n  async retryRequest(requestFunction, maxRetries = 3, delay = 1000) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await requestFunction();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2;\n      }\n    }\n  },\n  async batchRequests(requests, batchSize = 5, delay = 100) {\n    const results = [];\n    for (let i = 0; i < requests.length; i += batchSize) {\n      const batch = requests.slice(i, i + batchSize);\n      const batchResults = await Promise.allSettled(batch);\n      results.push(...batchResults);\n      if (i + batchSize < requests.length) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    return results;\n  },\n  formatCoordinates(lat, lng, precision = 6) {\n    return {\n      latitude: parseFloat(lat.toFixed(precision)),\n      longitude: parseFloat(lng.toFixed(precision))\n    };\n  },\n  validateSpillData(spillData) {\n    const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n    const errors = [];\n    for (const field of required) {\n      if (!spillData[field]) errors.push(`${field} is required`);\n    }\n    if (spillData.volume && spillData.volume <= 0) errors.push('Volume must be positive');\n    if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) errors.push('Latitude must be between -90 and 90');\n    if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) errors.push('Longitude must be between -180 and 180');\n    return errors;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","params","error","Promise","reject","response","_response$config$meth","_error$response","_error$response2","_error$response3","_error$response4","message","status","Error","code","apiService","getAllSpills","get","getActiveSpills","createSpill","spillData","post","updateSpillStatus","spillId","put","getCurrentWeather","latitude","longitude","getTideForecast","hours","subscribeToUpdates","onUpdate","eventSource","EventSource","onmessage","event","JSON","parse","onerror","close","retryRequest","requestFunction","maxRetries","delay","attempt","warn","resolve","setTimeout","batchRequests","requests","batchSize","results","i","length","batch","slice","batchResults","allSettled","push","formatCoordinates","lat","lng","precision","parseFloat","toFixed","validateSpillData","required","errors","field","volume"],"sources":["C:/water/chemical-dispersion-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Change baseURL from '/api/v1' to '/api' to match your Spring Boot configuration\nconst api = axios.create({\n  baseURL: '/api', // Removed /v1 to match your server.servlet.context-path=/api\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.request.use(\n  (config) => {\n    console.log(`🚀 ${config.method?.toUpperCase()} ${config.url}`, config.data || config.params);\n    return config;\n  },\n  (error) => {\n    console.error('❌ Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\napi.interceptors.response.use(\n  (response) => {\n    console.log(`✅ ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('❌ Response Error:', error.response?.data || error.message);\n    if (error.response?.status === 404) {\n      throw new Error('Resource not found');\n    } else if (error.response?.status === 400) {\n      throw new Error(error.response.data.message || 'Invalid request');\n    } else if (error.response?.status === 500) {\n      throw new Error('Server error occurred');\n    } else if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timeout - please try again');\n    }\n    throw error;\n  }\n);\n\nexport const apiService = {\n  // Spill Endpoints\n  async getAllSpills() {\n    // This endpoint returns all spills, active or contained.\n    return await api.get('/dispersion/spills/all');\n  },\n\n  async getActiveSpills() {\n    return await api.get('/dispersion/spills');\n  },\n\n  async createSpill(spillData) {\n    return await api.post('/dispersion/spills', spillData);\n  },\n\n  async updateSpillStatus(spillId, status) {\n    return await api.put(`/dispersion/spills/${spillId}/status`, null, {\n      params: { status }\n    });\n  },\n  \n  // Weather Endpoints\n  async getCurrentWeather(latitude, longitude) {\n    return await api.get('/weather/current', {\n      params: { latitude, longitude }\n    });\n  },\n\n  // Tide Endpoints\n  async getTideForecast(latitude, longitude, hours) {\n    return await api.get('/tides/forecast', {\n      params: { latitude, longitude, hours }\n    });\n  },\n\n  // Real-time updates endpoint\n  subscribeToUpdates(onUpdate) {\n    // Correct URL to use relative path without repeating /api\n    const eventSource = new EventSource('/api/real-time-updates');\n    \n    eventSource.onmessage = (event) => {\n      onUpdate(JSON.parse(event.data));\n    };\n\n    eventSource.onerror = (error) => {\n      console.error('EventSource failed:', error);\n      eventSource.close();\n    };\n\n    return () => eventSource.close();\n  },\n\n  // Other utility functions (keep these at the end)\n  async retryRequest(requestFunction, maxRetries = 3, delay = 1000) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await requestFunction();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2;\n      }\n    }\n  },\n\n  async batchRequests(requests, batchSize = 5, delay = 100) {\n    const results = [];\n    for (let i = 0; i < requests.length; i += batchSize) {\n      const batch = requests.slice(i, i + batchSize);\n      const batchResults = await Promise.allSettled(batch);\n      results.push(...batchResults);\n      if (i + batchSize < requests.length) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    return results;\n  },\n\n  formatCoordinates(lat, lng, precision = 6) {\n    return {\n      latitude: parseFloat(lat.toFixed(precision)),\n      longitude: parseFloat(lng.toFixed(precision))\n    };\n  },\n\n  validateSpillData(spillData) {\n    const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n    const errors = [];\n    for (const field of required) {\n      if (!spillData[field]) errors.push(`${field} is required`);\n    }\n    if (spillData.volume && spillData.volume <= 0) errors.push('Volume must be positive');\n    if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) errors.push('Latitude must be between -90 and 90');\n    if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) errors.push('Longitude must be between -180 and 180');\n    return errors;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}