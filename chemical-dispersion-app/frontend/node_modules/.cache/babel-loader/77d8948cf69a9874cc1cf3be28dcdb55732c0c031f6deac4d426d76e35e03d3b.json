{"ast":null,"code":"import axios from 'axios';\n\n// Change baseURL from '/api/v1' to '/api' to match your Spring Boot configuration\nconst api = axios.create({\n  baseURL: '/api',\n  // Removed /v1 to match your server.servlet.context-path=/api\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`🚀 ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.data || config.params);\n  return config;\n}, error => {\n  console.error('❌ Request Error:', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  var _response$config$meth;\n  console.log(`✅ ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response4;\n  console.error('❌ Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    throw new Error('Resource not found');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 400) {\n    throw new Error(error.response.data.message || 'Invalid request');\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 500) {\n    throw new Error('Server error occurred');\n  } else if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout - please try again');\n  }\n  throw error;\n});\nexport const apiService = {\n  // Existing functions...\n  createSpill: spillData => api.post('/spills', spillData),\n  calculateDispersion: spillId => api.post(`/dispersion/spills/${spillId}/calculate`),\n  getActiveSpills: () => api.get('/dispersion/spills'),\n  getSpillById: id => api.get(`/spills/${id}`),\n  updateSpillStatus: (id, status) => api.put(`/spills/${id}/status`, null, {\n    params: {\n      status\n    }\n  }),\n  deleteSpill: id => api.delete(`/spills/${id}`),\n  // Real-time updates\n  subscribeToUpdates: onUpdate => {\n    const sse = new EventSource('/api/real-time-updates');\n    sse.onmessage = event => {\n      try {\n        const updates = JSON.parse(event.data);\n        onUpdate(updates);\n      } catch (e) {\n        console.error(\"Error parsing SSE data\", e);\n      }\n    };\n    sse.onerror = error => {\n      console.error(\"EventSource failed:\", error);\n    };\n    console.log('Subscribing to real-time updates...');\n    return () => {\n      sse.close();\n      console.log('Unsubscribing from real-time updates.');\n    };\n  },\n  // Weather and Tide Data\n  getWeatherData: (latitude, longitude) => api.get('/weather/current', {\n    params: {\n      latitude,\n      longitude\n    }\n  }),\n  getWeatherForecast: (latitude, longitude) => api.get('/weather/forecast', {\n    params: {\n      latitude,\n      longitude,\n      hoursAhead: 72\n    }\n  }),\n  getTidalData: (latitude, longitude) => api.get('/tides/forecast', {\n    params: {\n      latitude,\n      longitude,\n      hoursAhead: 72\n    }\n  }),\n  // NEW\n\n  // Generic retry mechanism\n  async retryRequest(request, maxRetries = 3, delay = 1000) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await request();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2;\n      }\n    }\n  },\n  async batchRequests(requests, batchSize = 5, delay = 100) {\n    const results = [];\n    for (let i = 0; i < requests.length; i += batchSize) {\n      const batch = requests.slice(i, i + batchSize);\n      const batchResults = await Promise.allSettled(batch);\n      results.push(...batchResults);\n      if (i + batchSize < requests.length) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    return results;\n  },\n  formatCoordinates(lat, lng, precision = 6) {\n    return {\n      latitude: parseFloat(lat.toFixed(precision)),\n      longitude: parseFloat(lng.toFixed(precision))\n    };\n  },\n  validateSpillData(spillData) {\n    const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n    const errors = [];\n    for (const field of required) {\n      if (!spillData[field]) errors.push(`${field} is required`);\n    }\n    if (spillData.volume && spillData.volume <= 0) errors.push('Volume must be positive');\n    if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) errors.push('Latitude must be between -90 and 90');\n    if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) errors.push('Longitude must be between -180 and 180');\n    return errors;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","params","error","Promise","reject","response","_response$config$meth","_error$response","_error$response2","_error$response3","_error$response4","message","status","Error","code","apiService","createSpill","spillData","post","calculateDispersion","spillId","getActiveSpills","get","getSpillById","id","updateSpillStatus","put","deleteSpill","delete","subscribeToUpdates","onUpdate","sse","EventSource","onmessage","event","updates","JSON","parse","e","onerror","close","getWeatherData","latitude","longitude","getWeatherForecast","hoursAhead","getTidalData","retryRequest","maxRetries","delay","attempt","warn","resolve","setTimeout","batchRequests","requests","batchSize","results","i","length","batch","slice","batchResults","allSettled","push","formatCoordinates","lat","lng","precision","parseFloat","toFixed","validateSpillData","required","errors","field","volume"],"sources":["C:/water/chemical-dispersion-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Change baseURL from '/api/v1' to '/api' to match your Spring Boot configuration\nconst api = axios.create({\n  baseURL: '/api', // Removed /v1 to match your server.servlet.context-path=/api\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.request.use(\n  (config) => {\n    console.log(`🚀 ${config.method?.toUpperCase()} ${config.url}`, config.data || config.params);\n    return config;\n  },\n  (error) => {\n    console.error('❌ Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\napi.interceptors.response.use(\n  (response) => {\n    console.log(`✅ ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('❌ Response Error:', error.response?.data || error.message);\n    if (error.response?.status === 404) {\n      throw new Error('Resource not found');\n    } else if (error.response?.status === 400) {\n      throw new Error(error.response.data.message || 'Invalid request');\n    } else if (error.response?.status === 500) {\n      throw new Error('Server error occurred');\n    } else if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timeout - please try again');\n    }\n    throw error;\n  }\n);\n\nexport const apiService = {\n  // Existing functions...\n  createSpill: (spillData) => api.post('/spills', spillData),\n  calculateDispersion: (spillId) => api.post(`/dispersion/spills/${spillId}/calculate`),\n  getActiveSpills: () => api.get('/dispersion/spills'),\n  getSpillById: (id) => api.get(`/spills/${id}`),\n  updateSpillStatus: (id, status) => api.put(`/spills/${id}/status`, null, { params: { status } }),\n  deleteSpill: (id) => api.delete(`/spills/${id}`),\n  \n  // Real-time updates\n  subscribeToUpdates: (onUpdate) => {\n    const sse = new EventSource('/api/real-time-updates');\n    sse.onmessage = (event) => {\n      try {\n        const updates = JSON.parse(event.data);\n        onUpdate(updates);\n      } catch (e) {\n        console.error(\"Error parsing SSE data\", e);\n      }\n    };\n    sse.onerror = (error) => {\n      console.error(\"EventSource failed:\", error);\n    };\n    console.log('Subscribing to real-time updates...');\n    return () => {\n      sse.close();\n      console.log('Unsubscribing from real-time updates.');\n    };\n  },\n\n  // Weather and Tide Data\n  getWeatherData: (latitude, longitude) => api.get('/weather/current', { params: { latitude, longitude } }),\n  getWeatherForecast: (latitude, longitude) => api.get('/weather/forecast', { params: { latitude, longitude, hoursAhead: 72 } }),\n  getTidalData: (latitude, longitude) => api.get('/tides/forecast', { params: { latitude, longitude, hoursAhead: 72 } }), // NEW\n  \n  // Generic retry mechanism\n  async retryRequest(request, maxRetries = 3, delay = 1000) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await request();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2;\n      }\n    }\n  },\n\n  async batchRequests(requests, batchSize = 5, delay = 100) {\n    const results = [];\n    for (let i = 0; i < requests.length; i += batchSize) {\n      const batch = requests.slice(i, i + batchSize);\n      const batchResults = await Promise.allSettled(batch);\n      results.push(...batchResults);\n      if (i + batchSize < requests.length) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    return results;\n  },\n\n  formatCoordinates(lat, lng, precision = 6) {\n    return {\n      latitude: parseFloat(lat.toFixed(precision)),\n      longitude: parseFloat(lng.toFixed(precision))\n    };\n  },\n\n  validateSpillData(spillData) {\n    const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n    const errors = [];\n    for (const field of required) {\n      if (!spillData[field]) errors.push(`${field} is required`);\n    }\n    if (spillData.volume && spillData.volume <= 0) errors.push('Volume must be positive');\n    if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) errors.push('Latitude must be between -90 and 90');\n    if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) errors.push('Longitude must be between -180 and 180');\n    return errors;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}