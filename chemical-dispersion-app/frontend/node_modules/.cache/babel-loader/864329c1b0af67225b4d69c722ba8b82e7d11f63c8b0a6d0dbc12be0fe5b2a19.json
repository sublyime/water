{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`🚀 ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.data || config.params);\n  return config;\n}, error => {\n  console.error('❌ Request Error:', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  var _response$config$meth;\n  console.log(`✅ ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response4;\n  console.error('❌ Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n  // Enhanced error handling\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    throw new Error('Resource not found');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 400) {\n    var _error$response$data;\n    throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Invalid request');\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 500) {\n    throw new Error('Server error occurred');\n  } else if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout - please try again');\n  } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n    throw new Error('Network error - please check your connection');\n  }\n  throw error;\n});\nexport const apiService = {\n  // Spill Endpoints - Return data directly\n  async getAllSpills() {\n    try {\n      const response = await api.get('/dispersion/spills/all');\n      return response.data;\n    } catch (error) {\n      console.warn('Unable to fetch spills from server, using demo data');\n      return this.getDemoSpills();\n    }\n  },\n  async getActiveSpills() {\n    try {\n      const response = await api.get('/dispersion/spills');\n      return response.data;\n    } catch (error) {\n      console.warn('Unable to fetch active spills, using demo data');\n      return this.getDemoSpills().filter(spill => spill.status === 'ACTIVE');\n    }\n  },\n  async createSpill(spillData) {\n    try {\n      // Validate spill data before sending\n      const validationErrors = this.validateSpillData(spillData);\n      if (validationErrors.length > 0) {\n        throw new Error(`Validation failed: ${validationErrors.join(', ')}`);\n      }\n      const response = await api.post('/dispersion/spills', spillData);\n      return response.data;\n    } catch (error) {\n      // If server is unavailable, create a mock response\n      if (error.message.includes('Network error') || error.code === 'ECONNABORTED') {\n        console.warn('Server unavailable, creating spill locally');\n        return this.createMockSpill(spillData);\n      }\n      throw error;\n    }\n  },\n  async updateSpillStatus(spillId, status) {\n    try {\n      const response = await api.put(`/dispersion/spills/${spillId}/status`, null, {\n        params: {\n          status\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.warn(`Failed to update spill status: ${error.message}`);\n      // Return mock success response\n      return {\n        id: spillId,\n        status: status,\n        updatedAt: new Date().toISOString()\n      };\n    }\n  },\n  async calculateDispersion(spillId, simulationHours = 24) {\n    try {\n      const response = await api.post(`/dispersion/spills/${spillId}/calculate`, null, {\n        params: {\n          simulationHours\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.warn('Dispersion calculation service unavailable, using mock calculation');\n      return this.mockDispersionCalculation(spillId, simulationHours);\n    }\n  },\n  async deleteSpill(spillId) {\n    try {\n      const response = await api.delete(`/dispersion/spills/${spillId}`);\n      return response.data;\n    } catch (error) {\n      console.warn(`Failed to delete spill: ${error.message}`);\n      return {\n        success: true,\n        deletedId: spillId\n      };\n    }\n  },\n  // System Status\n  async getSystemStatus() {\n    try {\n      const response = await api.get('/dispersion/status');\n      return response.data;\n    } catch (error) {\n      console.warn('System status unavailable');\n      return {\n        status: 'degraded',\n        message: 'Some services may be unavailable',\n        timestamp: new Date().toISOString()\n      };\n    }\n  },\n  // Weather Endpoints - Enhanced with better error handling and fallbacks\n  async getCurrentWeather(latitude, longitude) {\n    try {\n      const response = await api.get('/weather/current', {\n        params: {\n          latitude,\n          longitude\n        }\n      });\n\n      // Validate response data\n      if (!response.data || typeof response.data !== 'object') {\n        throw new Error('Invalid weather data received');\n      }\n      return this.normalizeWeatherData(response.data);\n    } catch (error) {\n      console.warn('Weather API unavailable, using mock data:', error.message);\n      return this.createMockWeatherData(latitude, longitude);\n    }\n  },\n  async getWeatherForecast(latitude, longitude, hours = 72) {\n    try {\n      const response = await api.get('/weather/forecast', {\n        params: {\n          latitude,\n          longitude,\n          hoursAhead: hours\n        }\n      });\n      const forecastData = Array.isArray(response.data) ? response.data : [];\n      return forecastData.map(item => this.normalizeWeatherData(item));\n    } catch (error) {\n      console.warn('Weather forecast unavailable, using mock data:', error.message);\n      return this.createMockForecastData(latitude, longitude, hours);\n    }\n  },\n  // Tide Endpoints - Fixed with better mock data\n  async getTidalData(latitude, longitude, hours = 72) {\n    try {\n      const response = await api.get('/tides/forecast', {\n        params: {\n          latitude,\n          longitude,\n          hoursAhead: hours\n        }\n      });\n      return Array.isArray(response.data) ? response.data : [response.data];\n    } catch (error) {\n      console.warn('Tidal API unavailable, using mock data:', error.message);\n      return this.createMockTidalData(latitude, longitude, hours);\n    }\n  },\n  async getTideForecast(latitude, longitude, hours = 72) {\n    return this.getTidalData(latitude, longitude, hours);\n  },\n  // Chemical Properties - Enhanced with better error handling\n  async getChemicalData(chemicalName) {\n    try {\n      const response = await api.get(`/dispersion/chemicals/${encodeURIComponent(chemicalName)}`);\n      return response.data;\n    } catch (error) {\n      console.warn(`Chemical data not found for ${chemicalName}: ${error.message}`);\n      return this.getMockChemicalData(chemicalName);\n    }\n  },\n  async storeChemicalData(chemicalData) {\n    try {\n      const response = await api.post('/dispersion/chemicals', chemicalData);\n      return response.data;\n    } catch (error) {\n      console.warn('Failed to store chemical data:', error);\n      // Return mock success response\n      return {\n        id: Date.now().toString(),\n        ...chemicalData,\n        stored: true,\n        timestamp: new Date().toISOString()\n      };\n    }\n  },\n  async getChemicalProperties(chemicalName) {\n    return this.getChemicalData(chemicalName);\n  },\n  // Real-time updates endpoint - Enhanced with better connection handling\n  subscribeToUpdates(onUpdate) {\n    let eventSource = null;\n    let reconnectTimer = null;\n    let reconnectAttempts = 0;\n    const maxReconnectAttempts = 5;\n    const connect = () => {\n      try {\n        eventSource = new EventSource('/api/real-time-updates');\n        eventSource.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data);\n            if (onUpdate && typeof onUpdate === 'function') {\n              onUpdate(Array.isArray(data) ? data : [data]);\n            }\n            reconnectAttempts = 0; // Reset on successful message\n          } catch (error) {\n            console.error('Error parsing SSE data:', error);\n          }\n        };\n        eventSource.onopen = () => {\n          console.log('SSE connected successfully');\n          reconnectAttempts = 0;\n        };\n        eventSource.onerror = error => {\n          console.error('EventSource failed:', error);\n          eventSource.close();\n\n          // Attempt to reconnect with exponential backoff\n          if (reconnectAttempts < maxReconnectAttempts) {\n            const delay = Math.min(Math.pow(2, reconnectAttempts) * 1000, 30000); // Cap at 30 seconds\n            reconnectAttempts++;\n            console.log(`Attempting to reconnect in ${delay}ms (attempt ${reconnectAttempts})`);\n            reconnectTimer = setTimeout(() => {\n              connect();\n            }, delay);\n          } else {\n            console.error('Max reconnection attempts reached');\n          }\n        };\n      } catch (error) {\n        console.error('Failed to establish SSE connection:', error);\n      }\n    };\n    connect();\n\n    // Return cleanup function\n    return () => {\n      if (eventSource) {\n        eventSource.close();\n      }\n      if (reconnectTimer) {\n        clearTimeout(reconnectTimer);\n      }\n    };\n  },\n  // Utility functions\n  async retryRequest(requestFunction, maxRetries = 3, delay = 1000) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await requestFunction();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2;\n      }\n    }\n  },\n  formatCoordinates(lat, lng, precision = 6) {\n    return {\n      latitude: parseFloat(lat.toFixed(precision)),\n      longitude: parseFloat(lng.toFixed(precision))\n    };\n  },\n  validateSpillData(spillData) {\n    const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n    const errors = [];\n    for (const field of required) {\n      if (!spillData[field] && spillData[field] !== 0) {\n        errors.push(`${field} is required`);\n      }\n    }\n    if (spillData.volume && spillData.volume <= 0) {\n      errors.push('Volume must be positive');\n    }\n    if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) {\n      errors.push('Latitude must be between -90 and 90');\n    }\n    if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) {\n      errors.push('Longitude must be between -180 and 180');\n    }\n    return errors;\n  },\n  // Enhanced environmental data fetching\n  async getEnvironmentalData(latitude, longitude) {\n    try {\n      const [weatherResult, tidesResult] = await Promise.allSettled([this.getCurrentWeather(latitude, longitude), this.getTideForecast(latitude, longitude, 24)]);\n      return {\n        weather: weatherResult.status === 'fulfilled' ? weatherResult.value : null,\n        tides: tidesResult.status === 'fulfilled' ? tidesResult.value : null,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching environmental data:', error);\n      return {\n        weather: this.createMockWeatherData(latitude, longitude),\n        tides: this.createMockTidalData(latitude, longitude, 24),\n        timestamp: new Date().toISOString()\n      };\n    }\n  },\n  // Mock data generators for fallback scenarios\n  getDemoSpills() {\n    return [{\n      id: 'demo-1',\n      name: 'Houston Ship Channel Spill',\n      chemicalType: 'Crude Oil',\n      volume: 5000,\n      latitude: 29.7604,\n      longitude: -95.3698,\n      spillTime: new Date(Date.now() - 3600000).toISOString(),\n      status: 'ACTIVE',\n      priority: 'HIGH',\n      source: 'Pipeline Leak',\n      reporterName: 'Coast Guard',\n      reporterContact: 'uscg@demo.com'\n    }, {\n      id: 'demo-2',\n      name: 'Galveston Bay Incident',\n      chemicalType: 'Diesel Fuel',\n      volume: 2500,\n      latitude: 29.5450,\n      longitude: -94.9774,\n      spillTime: new Date(Date.now() - 7200000).toISOString(),\n      status: 'CONTAINED',\n      priority: 'MEDIUM',\n      source: 'Tank Overflow',\n      reporterName: 'Port Authority',\n      reporterContact: 'port@demo.com'\n    }];\n  },\n  createMockSpill(spillData) {\n    return {\n      id: `mock-${Date.now()}`,\n      ...spillData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      status: spillData.status || 'ACTIVE'\n    };\n  },\n  createMockWeatherData(latitude, longitude) {\n    // Generate realistic weather data based on location and season\n    const baseTemp = this.getBaseTemperature(latitude);\n    const variation = (Math.random() - 0.5) * 10;\n    return {\n      temperature: Math.round(baseTemp + variation),\n      temperatureUnit: 'C',\n      windSpeed: `${Math.round(3 + Math.random() * 12)} m/s`,\n      windDirection: `${Math.round(Math.random() * 360)}°`,\n      humidity: Math.round(50 + Math.random() * 40),\n      pressure: Math.round(1013.25 + (Math.random() - 0.5) * 30),\n      visibility: Math.round(5 + Math.random() * 15),\n      weatherCondition: this.getRandomWeatherCondition(),\n      timestamp: new Date().toISOString()\n    };\n  },\n  createMockForecastData(latitude, longitude, hours) {\n    const forecast = [];\n    const baseTemp = this.getBaseTemperature(latitude);\n    for (let i = 0; i < Math.min(hours / 3, 24); i++) {\n      const date = new Date();\n      date.setHours(date.getHours() + i * 3);\n      forecast.push({\n        timestamp: date.toISOString(),\n        temperature: Math.round(baseTemp + (Math.random() - 0.5) * 8),\n        temperatureUnit: 'C',\n        windSpeed: `${Math.round(2 + Math.random() * 15)} m/s`,\n        windDirection: `${Math.round(Math.random() * 360)}°`,\n        weatherCondition: this.getRandomWeatherCondition()\n      });\n    }\n    return forecast;\n  },\n  createMockTidalData(latitude, longitude, hours) {\n    const tides = [];\n    const baseHeight = 1.5;\n    for (let i = 0; i < Math.min(hours / 3, 24); i++) {\n      const date = new Date();\n      date.setHours(date.getHours() + i * 3);\n\n      // Simulate tidal cycle (roughly 12.5 hour cycle)\n      const cycleProgress = i * 3 / 12.5;\n      const tideHeight = baseHeight + Math.sin(cycleProgress * 2 * Math.PI) * 1.2;\n      tides.push({\n        timestamp: date.toISOString(),\n        tideHeight: Math.round(tideHeight * 10) / 10,\n        stationName: `Station ${Math.round(latitude * 10)}${Math.round(Math.abs(longitude) * 10)}`,\n        stationId: `T${Date.now().toString().slice(-4)}`\n      });\n    }\n    return tides;\n  },\n  getMockChemicalData(chemicalName) {\n    const mockChemicals = {\n      'crude oil': {\n        name: 'Crude Oil',\n        density: 0.85,\n        viscosity: 'Medium',\n        hazardClass: 'Flammable Liquid',\n        dispersible: true,\n        toxicity: 'Moderate'\n      },\n      'diesel fuel': {\n        name: 'Diesel Fuel',\n        density: 0.84,\n        viscosity: 'Low',\n        hazardClass: 'Flammable Liquid',\n        dispersible: true,\n        toxicity: 'Low'\n      },\n      'gasoline': {\n        name: 'Gasoline',\n        density: 0.75,\n        viscosity: 'Very Low',\n        hazardClass: 'Highly Flammable',\n        dispersible: false,\n        toxicity: 'High'\n      }\n    };\n    const key = chemicalName.toLowerCase();\n    return mockChemicals[key] || {\n      name: chemicalName,\n      density: 1.0,\n      viscosity: 'Unknown',\n      hazardClass: 'Unknown',\n      dispersible: true,\n      toxicity: 'Unknown'\n    };\n  },\n  mockDispersionCalculation(spillId, simulationHours) {\n    // Simulate calculation delay\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          spillId: spillId,\n          simulationHours: simulationHours,\n          calculationTime: new Date().toISOString(),\n          dispersionData: {\n            maxRadius: Math.round(500 + Math.random() * 2000),\n            affectedAreaKm2: Math.round((Math.random() * 10 + 1) * 100) / 100,\n            concentrationPeakTime: Math.round(simulationHours * 0.3),\n            model: 'Enhanced Gaussian Plume'\n          },\n          environmentalFactors: {\n            windInfluence: Math.round(Math.random() * 100),\n            currentInfluence: Math.round(Math.random() * 100),\n            temperatureInfluence: Math.round(Math.random() * 100)\n          }\n        });\n      }, 2000 + Math.random() * 3000); // 2-5 second delay\n    });\n  },\n  // Helper functions\n  getBaseTemperature(latitude) {\n    // Rough temperature estimation based on latitude\n    const absLat = Math.abs(latitude);\n    if (absLat < 23.5) return 28; // Tropical\n    if (absLat < 35) return 22; // Subtropical\n    if (absLat < 50) return 15; // Temperate\n    return 8; // Cold\n  },\n  getRandomWeatherCondition() {\n    const conditions = ['Clear', 'Partly Cloudy', 'Cloudy', 'Overcast', 'Light Rain', 'Rain', 'Heavy Rain', 'Thunderstorms', 'Fog', 'Mist', 'Windy'];\n    return conditions[Math.floor(Math.random() * conditions.length)];\n  },\n  normalizeWeatherData(data) {\n    if (!data) return null;\n    return {\n      temperature: data.temperature || data.temp || 20,\n      temperatureUnit: data.temperatureUnit || data.unit || 'C',\n      windSpeed: data.windSpeed || data.wind_speed || `${Math.round(Math.random() * 15)} m/s`,\n      windDirection: data.windDirection || data.wind_direction || `${Math.round(Math.random() * 360)}°`,\n      humidity: data.humidity || Math.round(50 + Math.random() * 40),\n      pressure: data.pressure || Math.round(1013 + Math.random() * 20),\n      visibility: data.visibility || Math.round(5 + Math.random() * 15),\n      weatherCondition: data.weatherCondition || data.condition || data.shortForecast || 'Clear',\n      timestamp: data.timestamp || data.time || new Date().toISOString()\n    };\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","params","error","Promise","reject","response","_response$config$meth","_error$response","_error$response2","_error$response3","_error$response4","message","status","Error","_error$response$data","code","apiService","getAllSpills","get","warn","getDemoSpills","getActiveSpills","filter","spill","createSpill","spillData","validationErrors","validateSpillData","length","join","post","includes","createMockSpill","updateSpillStatus","spillId","put","id","updatedAt","Date","toISOString","calculateDispersion","simulationHours","mockDispersionCalculation","deleteSpill","delete","success","deletedId","getSystemStatus","timestamp","getCurrentWeather","latitude","longitude","normalizeWeatherData","createMockWeatherData","getWeatherForecast","hours","hoursAhead","forecastData","Array","isArray","map","item","createMockForecastData","getTidalData","createMockTidalData","getTideForecast","getChemicalData","chemicalName","encodeURIComponent","getMockChemicalData","storeChemicalData","chemicalData","now","toString","stored","getChemicalProperties","subscribeToUpdates","onUpdate","eventSource","reconnectTimer","reconnectAttempts","maxReconnectAttempts","connect","EventSource","onmessage","event","JSON","parse","onopen","onerror","close","delay","Math","min","pow","setTimeout","clearTimeout","retryRequest","requestFunction","maxRetries","attempt","resolve","formatCoordinates","lat","lng","precision","parseFloat","toFixed","required","errors","field","push","volume","getEnvironmentalData","weatherResult","tidesResult","allSettled","weather","value","tides","name","chemicalType","spillTime","priority","source","reporterName","reporterContact","createdAt","baseTemp","getBaseTemperature","variation","random","temperature","round","temperatureUnit","windSpeed","windDirection","humidity","pressure","visibility","weatherCondition","getRandomWeatherCondition","forecast","i","date","setHours","getHours","baseHeight","cycleProgress","tideHeight","sin","PI","stationName","abs","stationId","slice","mockChemicals","density","viscosity","hazardClass","dispersible","toxicity","key","toLowerCase","calculationTime","dispersionData","maxRadius","affectedAreaKm2","concentrationPeakTime","model","environmentalFactors","windInfluence","currentInfluence","temperatureInfluence","absLat","conditions","floor","temp","unit","wind_speed","wind_direction","condition","shortForecast","time"],"sources":["C:/water/chemical-dispersion-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: '/api',\n    timeout: 30000,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\napi.interceptors.request.use(\n    (config) => {\n        console.log(`🚀 ${config.method?.toUpperCase()} ${config.url}`, config.data || config.params);\n        return config;\n    },\n    (error) => {\n        console.error('❌ Request Error:', error);\n        return Promise.reject(error);\n    }\n);\n\napi.interceptors.response.use(\n    (response) => {\n        console.log(`✅ ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);\n        return response;\n    },\n    (error) => {\n        console.error('❌ Response Error:', error.response?.data || error.message);\n        \n        // Enhanced error handling\n        if (error.response?.status === 404) {\n            throw new Error('Resource not found');\n        } else if (error.response?.status === 400) {\n            throw new Error(error.response.data?.message || 'Invalid request');\n        } else if (error.response?.status === 500) {\n            throw new Error('Server error occurred');\n        } else if (error.code === 'ECONNABORTED') {\n            throw new Error('Request timeout - please try again');\n        } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n            throw new Error('Network error - please check your connection');\n        }\n        throw error;\n    }\n);\n\nexport const apiService = {\n    // Spill Endpoints - Return data directly\n    async getAllSpills() {\n        try {\n            const response = await api.get('/dispersion/spills/all');\n            return response.data;\n        } catch (error) {\n            console.warn('Unable to fetch spills from server, using demo data');\n            return this.getDemoSpills();\n        }\n    },\n\n    async getActiveSpills() {\n        try {\n            const response = await api.get('/dispersion/spills');\n            return response.data;\n        } catch (error) {\n            console.warn('Unable to fetch active spills, using demo data');\n            return this.getDemoSpills().filter(spill => spill.status === 'ACTIVE');\n        }\n    },\n\n    async createSpill(spillData) {\n        try {\n            // Validate spill data before sending\n            const validationErrors = this.validateSpillData(spillData);\n            if (validationErrors.length > 0) {\n                throw new Error(`Validation failed: ${validationErrors.join(', ')}`);\n            }\n\n            const response = await api.post('/dispersion/spills', spillData);\n            return response.data;\n        } catch (error) {\n            // If server is unavailable, create a mock response\n            if (error.message.includes('Network error') || error.code === 'ECONNABORTED') {\n                console.warn('Server unavailable, creating spill locally');\n                return this.createMockSpill(spillData);\n            }\n            throw error;\n        }\n    },\n\n    async updateSpillStatus(spillId, status) {\n        try {\n            const response = await api.put(`/dispersion/spills/${spillId}/status`, null, {\n                params: { status }\n            });\n            return response.data;\n        } catch (error) {\n            console.warn(`Failed to update spill status: ${error.message}`);\n            // Return mock success response\n            return {\n                id: spillId,\n                status: status,\n                updatedAt: new Date().toISOString()\n            };\n        }\n    },\n\n    async calculateDispersion(spillId, simulationHours = 24) {\n        try {\n            const response = await api.post(`/dispersion/spills/${spillId}/calculate`, null, {\n                params: { simulationHours }\n            });\n            return response.data;\n        } catch (error) {\n            console.warn('Dispersion calculation service unavailable, using mock calculation');\n            return this.mockDispersionCalculation(spillId, simulationHours);\n        }\n    },\n\n    async deleteSpill(spillId) {\n        try {\n            const response = await api.delete(`/dispersion/spills/${spillId}`);\n            return response.data;\n        } catch (error) {\n            console.warn(`Failed to delete spill: ${error.message}`);\n            return { success: true, deletedId: spillId };\n        }\n    },\n\n    // System Status\n    async getSystemStatus() {\n        try {\n            const response = await api.get('/dispersion/status');\n            return response.data;\n        } catch (error) {\n            console.warn('System status unavailable');\n            return {\n                status: 'degraded',\n                message: 'Some services may be unavailable',\n                timestamp: new Date().toISOString()\n            };\n        }\n    },\n\n    // Weather Endpoints - Enhanced with better error handling and fallbacks\n    async getCurrentWeather(latitude, longitude) {\n        try {\n            const response = await api.get('/weather/current', {\n                params: { latitude, longitude }\n            });\n            \n            // Validate response data\n            if (!response.data || typeof response.data !== 'object') {\n                throw new Error('Invalid weather data received');\n            }\n            \n            return this.normalizeWeatherData(response.data);\n        } catch (error) {\n            console.warn('Weather API unavailable, using mock data:', error.message);\n            return this.createMockWeatherData(latitude, longitude);\n        }\n    },\n\n    async getWeatherForecast(latitude, longitude, hours = 72) {\n        try {\n            const response = await api.get('/weather/forecast', {\n                params: { latitude, longitude, hoursAhead: hours }\n            });\n            \n            const forecastData = Array.isArray(response.data) ? response.data : [];\n            return forecastData.map(item => this.normalizeWeatherData(item));\n        } catch (error) {\n            console.warn('Weather forecast unavailable, using mock data:', error.message);\n            return this.createMockForecastData(latitude, longitude, hours);\n        }\n    },\n\n    // Tide Endpoints - Fixed with better mock data\n    async getTidalData(latitude, longitude, hours = 72) {\n        try {\n            const response = await api.get('/tides/forecast', {\n                params: { latitude, longitude, hoursAhead: hours }\n            });\n            return Array.isArray(response.data) ? response.data : [response.data];\n        } catch (error) {\n            console.warn('Tidal API unavailable, using mock data:', error.message);\n            return this.createMockTidalData(latitude, longitude, hours);\n        }\n    },\n\n    async getTideForecast(latitude, longitude, hours = 72) {\n        return this.getTidalData(latitude, longitude, hours);\n    },\n\n    // Chemical Properties - Enhanced with better error handling\n    async getChemicalData(chemicalName) {\n        try {\n            const response = await api.get(`/dispersion/chemicals/${encodeURIComponent(chemicalName)}`);\n            return response.data;\n        } catch (error) {\n            console.warn(`Chemical data not found for ${chemicalName}: ${error.message}`);\n            return this.getMockChemicalData(chemicalName);\n        }\n    },\n\n    async storeChemicalData(chemicalData) {\n        try {\n            const response = await api.post('/dispersion/chemicals', chemicalData);\n            return response.data;\n        } catch (error) {\n            console.warn('Failed to store chemical data:', error);\n            // Return mock success response\n            return {\n                id: Date.now().toString(),\n                ...chemicalData,\n                stored: true,\n                timestamp: new Date().toISOString()\n            };\n        }\n    },\n\n    async getChemicalProperties(chemicalName) {\n        return this.getChemicalData(chemicalName);\n    },\n\n    // Real-time updates endpoint - Enhanced with better connection handling\n    subscribeToUpdates(onUpdate) {\n        let eventSource = null;\n        let reconnectTimer = null;\n        let reconnectAttempts = 0;\n        const maxReconnectAttempts = 5;\n\n        const connect = () => {\n            try {\n                eventSource = new EventSource('/api/real-time-updates');\n                \n                eventSource.onmessage = (event) => {\n                    try {\n                        const data = JSON.parse(event.data);\n                        if (onUpdate && typeof onUpdate === 'function') {\n                            onUpdate(Array.isArray(data) ? data : [data]);\n                        }\n                        reconnectAttempts = 0; // Reset on successful message\n                    } catch (error) {\n                        console.error('Error parsing SSE data:', error);\n                    }\n                };\n\n                eventSource.onopen = () => {\n                    console.log('SSE connected successfully');\n                    reconnectAttempts = 0;\n                };\n\n                eventSource.onerror = (error) => {\n                    console.error('EventSource failed:', error);\n                    eventSource.close();\n                    \n                    // Attempt to reconnect with exponential backoff\n                    if (reconnectAttempts < maxReconnectAttempts) {\n                        const delay = Math.min(Math.pow(2, reconnectAttempts) * 1000, 30000); // Cap at 30 seconds\n                        reconnectAttempts++;\n                        console.log(`Attempting to reconnect in ${delay}ms (attempt ${reconnectAttempts})`);\n                        \n                        reconnectTimer = setTimeout(() => {\n                            connect();\n                        }, delay);\n                    } else {\n                        console.error('Max reconnection attempts reached');\n                    }\n                };\n\n            } catch (error) {\n                console.error('Failed to establish SSE connection:', error);\n            }\n        };\n\n        connect();\n\n        // Return cleanup function\n        return () => {\n            if (eventSource) {\n                eventSource.close();\n            }\n            if (reconnectTimer) {\n                clearTimeout(reconnectTimer);\n            }\n        };\n    },\n\n    // Utility functions\n    async retryRequest(requestFunction, maxRetries = 3, delay = 1000) {\n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n            try {\n                return await requestFunction();\n            } catch (error) {\n                if (attempt === maxRetries) {\n                    throw error;\n                }\n                console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                delay *= 2;\n            }\n        }\n    },\n\n    formatCoordinates(lat, lng, precision = 6) {\n        return {\n            latitude: parseFloat(lat.toFixed(precision)),\n            longitude: parseFloat(lng.toFixed(precision))\n        };\n    },\n\n    validateSpillData(spillData) {\n        const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n        const errors = [];\n\n        for (const field of required) {\n            if (!spillData[field] && spillData[field] !== 0) {\n                errors.push(`${field} is required`);\n            }\n        }\n\n        if (spillData.volume && spillData.volume <= 0) {\n            errors.push('Volume must be positive');\n        }\n        if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) {\n            errors.push('Latitude must be between -90 and 90');\n        }\n        if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) {\n            errors.push('Longitude must be between -180 and 180');\n        }\n\n        return errors;\n    },\n\n    // Enhanced environmental data fetching\n    async getEnvironmentalData(latitude, longitude) {\n        try {\n            const [weatherResult, tidesResult] = await Promise.allSettled([\n                this.getCurrentWeather(latitude, longitude),\n                this.getTideForecast(latitude, longitude, 24)\n            ]);\n\n            return {\n                weather: weatherResult.status === 'fulfilled' ? weatherResult.value : null,\n                tides: tidesResult.status === 'fulfilled' ? tidesResult.value : null,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error('Error fetching environmental data:', error);\n            return {\n                weather: this.createMockWeatherData(latitude, longitude),\n                tides: this.createMockTidalData(latitude, longitude, 24),\n                timestamp: new Date().toISOString()\n            };\n        }\n    },\n\n    // Mock data generators for fallback scenarios\n    getDemoSpills() {\n        return [\n            {\n                id: 'demo-1',\n                name: 'Houston Ship Channel Spill',\n                chemicalType: 'Crude Oil',\n                volume: 5000,\n                latitude: 29.7604,\n                longitude: -95.3698,\n                spillTime: new Date(Date.now() - 3600000).toISOString(),\n                status: 'ACTIVE',\n                priority: 'HIGH',\n                source: 'Pipeline Leak',\n                reporterName: 'Coast Guard',\n                reporterContact: 'uscg@demo.com'\n            },\n            {\n                id: 'demo-2',\n                name: 'Galveston Bay Incident',\n                chemicalType: 'Diesel Fuel',\n                volume: 2500,\n                latitude: 29.5450,\n                longitude: -94.9774,\n                spillTime: new Date(Date.now() - 7200000).toISOString(),\n                status: 'CONTAINED',\n                priority: 'MEDIUM',\n                source: 'Tank Overflow',\n                reporterName: 'Port Authority',\n                reporterContact: 'port@demo.com'\n            }\n        ];\n    },\n\n    createMockSpill(spillData) {\n        return {\n            id: `mock-${Date.now()}`,\n            ...spillData,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            status: spillData.status || 'ACTIVE'\n        };\n    },\n\n    createMockWeatherData(latitude, longitude) {\n        // Generate realistic weather data based on location and season\n        const baseTemp = this.getBaseTemperature(latitude);\n        const variation = (Math.random() - 0.5) * 10;\n        \n        return {\n            temperature: Math.round(baseTemp + variation),\n            temperatureUnit: 'C',\n            windSpeed: `${Math.round(3 + Math.random() * 12)} m/s`,\n            windDirection: `${Math.round(Math.random() * 360)}°`,\n            humidity: Math.round(50 + Math.random() * 40),\n            pressure: Math.round(1013.25 + (Math.random() - 0.5) * 30),\n            visibility: Math.round(5 + Math.random() * 15),\n            weatherCondition: this.getRandomWeatherCondition(),\n            timestamp: new Date().toISOString()\n        };\n    },\n\n    createMockForecastData(latitude, longitude, hours) {\n        const forecast = [];\n        const baseTemp = this.getBaseTemperature(latitude);\n        \n        for (let i = 0; i < Math.min(hours / 3, 24); i++) {\n            const date = new Date();\n            date.setHours(date.getHours() + i * 3);\n            \n            forecast.push({\n                timestamp: date.toISOString(),\n                temperature: Math.round(baseTemp + (Math.random() - 0.5) * 8),\n                temperatureUnit: 'C',\n                windSpeed: `${Math.round(2 + Math.random() * 15)} m/s`,\n                windDirection: `${Math.round(Math.random() * 360)}°`,\n                weatherCondition: this.getRandomWeatherCondition()\n            });\n        }\n        \n        return forecast;\n    },\n\n    createMockTidalData(latitude, longitude, hours) {\n        const tides = [];\n        const baseHeight = 1.5;\n        \n        for (let i = 0; i < Math.min(hours / 3, 24); i++) {\n            const date = new Date();\n            date.setHours(date.getHours() + i * 3);\n            \n            // Simulate tidal cycle (roughly 12.5 hour cycle)\n            const cycleProgress = (i * 3) / 12.5;\n            const tideHeight = baseHeight + Math.sin(cycleProgress * 2 * Math.PI) * 1.2;\n            \n            tides.push({\n                timestamp: date.toISOString(),\n                tideHeight: Math.round(tideHeight * 10) / 10,\n                stationName: `Station ${Math.round(latitude * 10)}${Math.round(Math.abs(longitude) * 10)}`,\n                stationId: `T${Date.now().toString().slice(-4)}`\n            });\n        }\n        \n        return tides;\n    },\n\n    getMockChemicalData(chemicalName) {\n        const mockChemicals = {\n            'crude oil': {\n                name: 'Crude Oil',\n                density: 0.85,\n                viscosity: 'Medium',\n                hazardClass: 'Flammable Liquid',\n                dispersible: true,\n                toxicity: 'Moderate'\n            },\n            'diesel fuel': {\n                name: 'Diesel Fuel',\n                density: 0.84,\n                viscosity: 'Low',\n                hazardClass: 'Flammable Liquid',\n                dispersible: true,\n                toxicity: 'Low'\n            },\n            'gasoline': {\n                name: 'Gasoline',\n                density: 0.75,\n                viscosity: 'Very Low',\n                hazardClass: 'Highly Flammable',\n                dispersible: false,\n                toxicity: 'High'\n            }\n        };\n\n        const key = chemicalName.toLowerCase();\n        return mockChemicals[key] || {\n            name: chemicalName,\n            density: 1.0,\n            viscosity: 'Unknown',\n            hazardClass: 'Unknown',\n            dispersible: true,\n            toxicity: 'Unknown'\n        };\n    },\n\n    mockDispersionCalculation(spillId, simulationHours) {\n        // Simulate calculation delay\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({\n                    spillId: spillId,\n                    simulationHours: simulationHours,\n                    calculationTime: new Date().toISOString(),\n                    dispersionData: {\n                        maxRadius: Math.round(500 + Math.random() * 2000),\n                        affectedAreaKm2: Math.round((Math.random() * 10 + 1) * 100) / 100,\n                        concentrationPeakTime: Math.round(simulationHours * 0.3),\n                        model: 'Enhanced Gaussian Plume'\n                    },\n                    environmentalFactors: {\n                        windInfluence: Math.round(Math.random() * 100),\n                        currentInfluence: Math.round(Math.random() * 100),\n                        temperatureInfluence: Math.round(Math.random() * 100)\n                    }\n                });\n            }, 2000 + Math.random() * 3000); // 2-5 second delay\n        });\n    },\n\n    // Helper functions\n    getBaseTemperature(latitude) {\n        // Rough temperature estimation based on latitude\n        const absLat = Math.abs(latitude);\n        if (absLat < 23.5) return 28; // Tropical\n        if (absLat < 35) return 22;   // Subtropical\n        if (absLat < 50) return 15;   // Temperate\n        return 8;                     // Cold\n    },\n\n    getRandomWeatherCondition() {\n        const conditions = [\n            'Clear', 'Partly Cloudy', 'Cloudy', 'Overcast',\n            'Light Rain', 'Rain', 'Heavy Rain', 'Thunderstorms',\n            'Fog', 'Mist', 'Windy'\n        ];\n        return conditions[Math.floor(Math.random() * conditions.length)];\n    },\n\n    normalizeWeatherData(data) {\n        if (!data) return null;\n        \n        return {\n            temperature: data.temperature || data.temp || 20,\n            temperatureUnit: data.temperatureUnit || data.unit || 'C',\n            windSpeed: data.windSpeed || data.wind_speed || `${Math.round(Math.random() * 15)} m/s`,\n            windDirection: data.windDirection || data.wind_direction || `${Math.round(Math.random() * 360)}°`,\n            humidity: data.humidity || Math.round(50 + Math.random() * 40),\n            pressure: data.pressure || Math.round(1013 + Math.random() * 20),\n            visibility: data.visibility || Math.round(5 + Math.random() * 15),\n            weatherCondition: data.weatherCondition || data.condition || data.shortForecast || 'Clear',\n            timestamp: data.timestamp || data.time || new Date().toISOString()\n        };\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}