{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`üöÄ ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.data || config.params);\n  return config;\n}, error => {\n  console.error('‚ùå Request Error:', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  var _response$config$meth;\n  console.log(`‚úÖ ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response4;\n  console.error('‚ùå Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    throw new Error('Resource not found');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 400) {\n    throw new Error(error.response.data.message || 'Invalid request');\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 500) {\n    throw new Error('Server error occurred');\n  } else if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout - please try again');\n  }\n  throw error;\n});\nexport const apiService = {\n  // Spill Endpoints\n  async getAllSpills() {\n    const response = await api.get('/dispersion/spills/all');\n    return response;\n  },\n  async getActiveSpills() {\n    const response = await api.get('/dispersion/spills');\n    return response;\n  },\n  async createSpill(spillData) {\n    const response = await api.post('/dispersion/spills', spillData);\n    return response;\n  },\n  async updateSpillStatus(spillId, status) {\n    const response = await api.put(`/dispersion/spills/${spillId}/status`, null, {\n      params: {\n        status\n      }\n    });\n    return response;\n  },\n  async calculateDispersion(spillId, simulationHours = 24) {\n    const response = await api.post(`/dispersion/spills/${spillId}/calculate`, null, {\n      params: {\n        simulationHours\n      }\n    });\n    return response;\n  },\n  // System Status\n  async getSystemStatus() {\n    const response = await api.get('/dispersion/status');\n    return response;\n  },\n  // Weather Endpoints\n  async getCurrentWeather(latitude, longitude) {\n    const response = await api.get('/weather/current', {\n      params: {\n        latitude,\n        longitude\n      }\n    });\n    return response;\n  },\n  async getWeatherForecast(latitude, longitude, hours = 72) {\n    const response = await api.get('/weather/forecast', {\n      params: {\n        latitude,\n        longitude,\n        hoursAhead: hours\n      }\n    });\n    return response;\n  },\n  // Tide Endpoints\n  async getTideForecast(latitude, longitude, hours = 72) {\n    const response = await api.get('/tides/forecast', {\n      params: {\n        latitude,\n        longitude,\n        hoursAhead: hours\n      }\n    });\n    return response;\n  },\n  // Real-time updates endpoint\n  subscribeToUpdates(onUpdate) {\n    const eventSource = new EventSource('/api/real-time-updates');\n    eventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        onUpdate(data);\n      } catch (error) {\n        console.error('Error parsing SSE data:', error);\n      }\n    };\n    eventSource.onerror = error => {\n      console.error('EventSource failed:', error);\n      eventSource.close();\n    };\n    return () => eventSource.close();\n  },\n  // Chemical Properties\n  async getChemicalProperties(chemicalName) {\n    try {\n      const response = await api.get(`/dispersion/chemicals/${encodeURIComponent(chemicalName)}`);\n      return response;\n    } catch (error) {\n      console.warn(`Chemical properties not found for ${chemicalName}`);\n      return null;\n    }\n  },\n  // Utility functions\n  async retryRequest(requestFunction, maxRetries = 3, delay = 1000) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await requestFunction();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2;\n      }\n    }\n  },\n  formatCoordinates(lat, lng, precision = 6) {\n    return {\n      latitude: parseFloat(lat.toFixed(precision)),\n      longitude: parseFloat(lng.toFixed(precision))\n    };\n  },\n  validateSpillData(spillData) {\n    const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n    const errors = [];\n    for (const field of required) {\n      if (!spillData[field]) errors.push(`${field} is required`);\n    }\n    if (spillData.volume && spillData.volume <= 0) errors.push('Volume must be positive');\n    if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) {\n      errors.push('Latitude must be between -90 and 90');\n    }\n    if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) {\n      errors.push('Longitude must be between -180 and 180');\n    }\n    return errors;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","params","error","Promise","reject","response","_response$config$meth","_error$response","_error$response2","_error$response3","_error$response4","message","status","Error","code","apiService","getAllSpills","get","getActiveSpills","createSpill","spillData","post","updateSpillStatus","spillId","put","calculateDispersion","simulationHours","getSystemStatus","getCurrentWeather","latitude","longitude","getWeatherForecast","hours","hoursAhead","getTideForecast","subscribeToUpdates","onUpdate","eventSource","EventSource","onmessage","event","JSON","parse","onerror","close","getChemicalProperties","chemicalName","encodeURIComponent","warn","retryRequest","requestFunction","maxRetries","delay","attempt","resolve","setTimeout","formatCoordinates","lat","lng","precision","parseFloat","toFixed","validateSpillData","required","errors","field","push","volume"],"sources":["C:/water/chemical-dispersion-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: '/api',\n    timeout: 30000,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\napi.interceptors.request.use(\n    (config) => {\n        console.log(`üöÄ ${config.method?.toUpperCase()} ${config.url}`, config.data || config.params);\n        return config;\n    },\n    (error) => {\n        console.error('‚ùå Request Error:', error);\n        return Promise.reject(error);\n    }\n);\n\napi.interceptors.response.use(\n    (response) => {\n        console.log(`‚úÖ ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);\n        return response;\n    },\n    (error) => {\n        console.error('‚ùå Response Error:', error.response?.data || error.message);\n        if (error.response?.status === 404) {\n            throw new Error('Resource not found');\n        } else if (error.response?.status === 400) {\n            throw new Error(error.response.data.message || 'Invalid request');\n        } else if (error.response?.status === 500) {\n            throw new Error('Server error occurred');\n        } else if (error.code === 'ECONNABORTED') {\n            throw new Error('Request timeout - please try again');\n        }\n        throw error;\n    }\n);\n\nexport const apiService = {\n    // Spill Endpoints\n    async getAllSpills() {\n        const response = await api.get('/dispersion/spills/all');\n        return response;\n    },\n\n    async getActiveSpills() {\n        const response = await api.get('/dispersion/spills');\n        return response;\n    },\n\n    async createSpill(spillData) {\n        const response = await api.post('/dispersion/spills', spillData);\n        return response;\n    },\n\n    async updateSpillStatus(spillId, status) {\n        const response = await api.put(`/dispersion/spills/${spillId}/status`, null, {\n            params: { status }\n        });\n        return response;\n    },\n\n    async calculateDispersion(spillId, simulationHours = 24) {\n        const response = await api.post(`/dispersion/spills/${spillId}/calculate`, null, {\n            params: { simulationHours }\n        });\n        return response;\n    },\n\n    // System Status\n    async getSystemStatus() {\n        const response = await api.get('/dispersion/status');\n        return response;\n    },\n\n    // Weather Endpoints\n    async getCurrentWeather(latitude, longitude) {\n        const response = await api.get('/weather/current', {\n            params: { latitude, longitude }\n        });\n        return response;\n    },\n\n    async getWeatherForecast(latitude, longitude, hours = 72) {\n        const response = await api.get('/weather/forecast', {\n            params: { latitude, longitude, hoursAhead: hours }\n        });\n        return response;\n    },\n\n    // Tide Endpoints\n    async getTideForecast(latitude, longitude, hours = 72) {\n        const response = await api.get('/tides/forecast', {\n            params: { latitude, longitude, hoursAhead: hours }\n        });\n        return response;\n    },\n\n    // Real-time updates endpoint\n    subscribeToUpdates(onUpdate) {\n        const eventSource = new EventSource('/api/real-time-updates');\n        \n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                onUpdate(data);\n            } catch (error) {\n                console.error('Error parsing SSE data:', error);\n            }\n        };\n        \n        eventSource.onerror = (error) => {\n            console.error('EventSource failed:', error);\n            eventSource.close();\n        };\n        \n        return () => eventSource.close();\n    },\n\n    // Chemical Properties\n    async getChemicalProperties(chemicalName) {\n        try {\n            const response = await api.get(`/dispersion/chemicals/${encodeURIComponent(chemicalName)}`);\n            return response;\n        } catch (error) {\n            console.warn(`Chemical properties not found for ${chemicalName}`);\n            return null;\n        }\n    },\n\n    // Utility functions\n    async retryRequest(requestFunction, maxRetries = 3, delay = 1000) {\n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n            try {\n                return await requestFunction();\n            } catch (error) {\n                if (attempt === maxRetries) {\n                    throw error;\n                }\n                console.warn(`Retrying API call (${attempt}/${maxRetries}) in ${delay}ms...`);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                delay *= 2;\n            }\n        }\n    },\n\n    formatCoordinates(lat, lng, precision = 6) {\n        return {\n            latitude: parseFloat(lat.toFixed(precision)),\n            longitude: parseFloat(lng.toFixed(precision))\n        };\n    },\n\n    validateSpillData(spillData) {\n        const required = ['name', 'chemicalType', 'volume', 'latitude', 'longitude', 'spillTime'];\n        const errors = [];\n        \n        for (const field of required) {\n            if (!spillData[field]) errors.push(`${field} is required`);\n        }\n        \n        if (spillData.volume && spillData.volume <= 0) errors.push('Volume must be positive');\n        if (spillData.latitude && (spillData.latitude < -90 || spillData.latitude > 90)) {\n            errors.push('Latitude must be between -90 and 90');\n        }\n        if (spillData.longitude && (spillData.longitude < -180 || spillData.longitude > 180)) {\n            errors.push('Longitude must be between -180 and 180');\n        }\n        \n        return errors;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}