{"ast":null,"code":"var _jsxFileName = \"C:\\\\water\\\\chemical-dispersion-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, Link, useLocation } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport SpillForm from './components/Forms/SpillForm';\nimport WeatherPanel from './components/Weather/WeatherPanel';\nimport DispersionMap from './components/Map/DispersionMap';\nimport { apiService } from './services/api';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [activeSpills, setActiveSpills] = useState([]);\n  const [allSpills, setAllSpills] = useState([]);\n  const [selectedSpill, setSelectedSpill] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [emergencyAlert, setEmergencyAlert] = useState(null);\n  const [systemStatus, setSystemStatus] = useState('online');\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // FIXED: Track calculations in progress to prevent infinite loops\n  const calculationsInProgress = useRef(new Set());\n  const calculationTimeouts = useRef(new Map());\n\n  // Load initial data and set up auto-refresh\n  useEffect(() => {\n    loadActiveSpills();\n\n    // Set up auto-refresh interval\n    let refreshInterval;\n    if (autoRefresh) {\n      refreshInterval = setInterval(() => {\n        loadActiveSpills(false); // Silent refresh\n      }, 60000); // Refresh every minute\n    }\n\n    // Set up real-time updates subscription\n    const unsubscribe = apiService.subscribeToUpdates(updates => {\n      handleRealTimeUpdates(updates);\n    });\n    return () => {\n      if (refreshInterval) clearInterval(refreshInterval);\n      if (unsubscribe) unsubscribe();\n      // Clear any pending calculation timeouts\n      calculationTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      calculationTimeouts.current.clear();\n    };\n  }, [autoRefresh]);\n\n  // Handle real-time updates\n  const handleRealTimeUpdates = useCallback(updates => {\n    if (updates && updates.length > 0) {\n      updates.forEach(update => {\n        switch (update.type) {\n          case 'spill_created':\n            setActiveSpills(prev => [...prev, update.data]);\n            setAllSpills(prev => [...prev, update.data]);\n            showNotification(`New spill reported: ${update.data.name}`, 'info');\n            break;\n          case 'spill_updated':\n            setActiveSpills(prev => prev.map(spill => spill.id === update.data.id ? {\n              ...spill,\n              ...update.data\n            } : spill));\n            setAllSpills(prev => prev.map(spill => spill.id === update.data.id ? {\n              ...spill,\n              ...update.data\n            } : spill));\n            break;\n          case 'spill_status_changed':\n            setActiveSpills(prev => prev.map(spill => spill.id === update.spillId ? {\n              ...spill,\n              status: update.newStatus,\n              updatedAt: new Date().toISOString()\n            } : spill));\n            if (update.newStatus === 'CONTAINED') {\n              showNotification(`Spill ${update.spillId} marked as contained`, 'success');\n            }\n            break;\n          case 'emergency_alert':\n            setEmergencyAlert(update.message);\n            showNotification(update.message, 'error');\n            break;\n          default:\n            break;\n        }\n      });\n    }\n  }, []);\n\n  // Load active spills data\n  const loadActiveSpills = async (showLoadingState = true) => {\n    try {\n      if (showLoadingState) {\n        setLoading(true);\n      }\n      setSystemStatus('loading');\n      const [allSpillsData, activeSpillsData] = await Promise.all([apiService.getAllSpills(), apiService.getActiveSpills()]);\n\n      // Ensure arrays\n      const allSpillsArray = Array.isArray(allSpillsData) ? allSpillsData : [];\n      const activeSpillsArray = Array.isArray(activeSpillsData) ? activeSpillsData : [];\n\n      // Filter active spills from all spills if needed\n      const activeSpillsList = activeSpillsArray.length > 0 ? activeSpillsArray : allSpillsArray.filter(spill => spill.status === 'ACTIVE' || spill.status === 'CONTAINED');\n      setAllSpills(allSpillsArray);\n      setActiveSpills(activeSpillsList);\n      setLastUpdate(new Date());\n      setSystemStatus('online');\n\n      // Check for emergency level spills\n      checkForEmergencyConditions(activeSpillsList);\n    } catch (error) {\n      console.error('Error loading spills:', error);\n      setSystemStatus('error');\n      showNotification('Failed to load spill data. Using offline mode.', 'warning');\n\n      // Try to use cached data or show empty state\n      if (activeSpills.length === 0 && allSpills.length === 0) {\n        // Load demo data for development\n        const demoSpills = [{\n          id: 'demo-1',\n          name: 'Demo Oil Spill',\n          chemicalType: 'Crude Oil',\n          volume: 5000,\n          latitude: 29.7604,\n          longitude: -95.3698,\n          spillTime: new Date(Date.now() - 3600000).toISOString(),\n          // 1 hour ago\n          status: 'ACTIVE',\n          priority: 'HIGH',\n          source: 'Pipeline Leak',\n          reporterName: 'System Demo',\n          reporterContact: 'demo@system.com'\n        }];\n        setAllSpills(demoSpills);\n        setActiveSpills(demoSpills);\n      }\n    } finally {\n      if (showLoadingState) {\n        setLoading(false);\n      }\n    }\n  };\n\n  // Check for emergency conditions\n  const checkForEmergencyConditions = spills => {\n    const criticalSpills = spills.filter(spill => spill.volume > 10000 || spill.chemicalType.toLowerCase().includes('toxic') || spill.priority === 'CRITICAL' || spill.chemicalData && spill.chemicalData.hazardClass && spill.chemicalData.hazardClass.toLowerCase().includes('hazard'));\n    if (criticalSpills.length > 0) {\n      const alertMessage = `${criticalSpills.length} critical incident(s) detected requiring immediate attention!`;\n      setEmergencyAlert(alertMessage);\n    } else {\n      setEmergencyAlert(null);\n    }\n  };\n\n  // Show notification (could be replaced with a proper notification system)\n  const showNotification = (message, type = 'info') => {\n    console.log(`[${type.toUpperCase()}] ${message}`);\n    // For now, show critical notifications as alerts\n    if (type === 'error') {\n      setTimeout(() => {\n        alert(message);\n      }, 100);\n    }\n  };\n\n  // Handle spill creation\n  const handleSpillCreated = useCallback(newSpill => {\n    setActiveSpills(prev => {\n      // Avoid duplicates\n      const exists = prev.some(spill => spill.id === newSpill.id);\n      if (exists) {\n        return prev.map(spill => spill.id === newSpill.id ? newSpill : spill);\n      }\n      return [...prev, newSpill];\n    });\n    setAllSpills(prev => {\n      const exists = prev.some(spill => spill.id === newSpill.id);\n      if (exists) {\n        return prev.map(spill => spill.id === newSpill.id ? newSpill : spill);\n      }\n      return [...prev, newSpill];\n    });\n    setSelectedSpill(newSpill);\n    showNotification(`New spill reported: ${newSpill.name}`, 'success');\n\n    // Check if this creates an emergency condition\n    checkForEmergencyConditions([...activeSpills, newSpill]);\n  }, [activeSpills]);\n\n  // Handle spill selection\n  const handleSpillSelected = useCallback(spill => {\n    setSelectedSpill(spill);\n  }, []);\n\n  // Handle spill updates\n  const handleSpillUpdated = useCallback(updatedSpill => {\n    setActiveSpills(prev => prev.map(spill => spill.id === updatedSpill.id ? updatedSpill : spill));\n    setAllSpills(prev => prev.map(spill => spill.id === updatedSpill.id ? updatedSpill : spill));\n    if (selectedSpill && selectedSpill.id === updatedSpill.id) {\n      setSelectedSpill(updatedSpill);\n    }\n    showNotification(`Spill ${updatedSpill.name} updated`, 'info');\n  }, [selectedSpill]);\n\n  // FIXED: Handle dispersion calculation with proper debouncing and deduplication\n  const handleCalculateDispersion = useCallback(async (spillId, simulationHours = 24) => {\n    // Prevent multiple calculations for the same spill\n    if (calculationsInProgress.current.has(spillId)) {\n      console.log(`[SKIP] Calculation already in progress for spill ${spillId}`);\n      return;\n    }\n\n    // Clear any existing timeout for this spill\n    if (calculationTimeouts.current.has(spillId)) {\n      clearTimeout(calculationTimeouts.current.get(spillId));\n      calculationTimeouts.current.delete(spillId);\n    }\n\n    // Add to in-progress set\n    calculationsInProgress.current.add(spillId);\n    try {\n      console.log(`[STARTING] Dispersion calculation for spill ${spillId}`);\n      const result = await apiService.calculateDispersion(spillId, simulationHours);\n\n      // Update the spill with dispersion data\n      setActiveSpills(prev => prev.map(spill => spill.id === spillId ? {\n        ...spill,\n        dispersionData: result.dispersionData,\n        lastCalculated: new Date().toISOString()\n      } : spill));\n      setAllSpills(prev => prev.map(spill => spill.id === spillId ? {\n        ...spill,\n        dispersionData: result.dispersionData,\n        lastCalculated: new Date().toISOString()\n      } : spill));\n      console.log(`[SUCCESS] Dispersion calculation completed for ${spillId}`);\n      showNotification('Dispersion calculation completed', 'success');\n      return result;\n    } catch (error) {\n      console.error(`[ERROR] Dispersion calculation failed for ${spillId}:`, error);\n      showNotification('Dispersion calculation failed', 'error');\n      throw error;\n    } finally {\n      // Remove from in-progress set\n      calculationsInProgress.current.delete(spillId);\n    }\n  }, []);\n\n  // Handle status updates\n  const handleStatusUpdate = async (spillId, newStatus) => {\n    try {\n      await apiService.updateSpillStatus(spillId, newStatus);\n      setActiveSpills(prev => prev.map(spill => spill.id === spillId ? {\n        ...spill,\n        status: newStatus,\n        updatedAt: new Date().toISOString()\n      } : spill));\n      setAllSpills(prev => prev.map(spill => spill.id === spillId ? {\n        ...spill,\n        status: newStatus,\n        updatedAt: new Date().toISOString()\n      } : spill));\n      showNotification(`Spill status updated to ${newStatus}`, 'success');\n    } catch (error) {\n      console.error('Error updating spill status:', error);\n      showNotification('Failed to update spill status', 'error');\n    }\n  };\n\n  // System status indicator\n  const getSystemStatusClass = () => {\n    switch (systemStatus) {\n      case 'online':\n        return 'status-online';\n      case 'loading':\n        return 'status-loading';\n      case 'error':\n        return 'status-error';\n      default:\n        return 'status-unknown';\n    }\n  };\n  const getSystemStatusText = () => {\n    switch (systemStatus) {\n      case 'online':\n        return 'System Online';\n      case 'loading':\n        return 'Updating...';\n      case 'error':\n        return 'Connection Issue';\n      default:\n        return 'Unknown Status';\n    }\n  };\n\n  // Loading screen\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading Chemical Dispersion Monitor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Initializing monitoring systems and data sources...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [emergencyAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emergency-alert\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"alert-icon\",\n          children: \"\\u26A0\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"alert-message\",\n          children: emergencyAlert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"alert-close\",\n          onClick: () => setEmergencyAlert(null),\n          \"aria-label\": \"Close alert\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"system-status-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${getSystemStatusClass()}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-text\",\n          children: getSystemStatusText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this), lastUpdate && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"last-update\",\n          children: [\"Last Update: \", lastUpdate.toLocaleTimeString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"system-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-refresh-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: autoRefresh,\n            onChange: e => setAutoRefresh(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 25\n          }, this), \"Auto Refresh\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"refresh-button\",\n          onClick: () => loadActiveSpills(true),\n          disabled: systemStatus === 'loading',\n          children: \"\\uD83D\\uDD04 Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Dashboard, {\n            spills: allSpills,\n            activeSpills: activeSpills,\n            onSpillSelect: handleSpillSelected,\n            onCreate: handleSpillCreated,\n            onStatusUpdate: handleStatusUpdate,\n            systemStatus: systemStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/spill\",\n          element: /*#__PURE__*/_jsxDEV(SpillForm, {\n            onSpillCreated: handleSpillCreated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/map\",\n          element: /*#__PURE__*/_jsxDEV(DispersionMap, {\n            spills: allSpills,\n            activeSpills: activeSpills,\n            selectedSpill: selectedSpill,\n            onSpillSelect: handleSpillSelected,\n            calculateDispersion: handleCalculateDispersion,\n            onStatusUpdate: handleStatusUpdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/weather\",\n          element: /*#__PURE__*/_jsxDEV(WeatherPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"QPkdwqdOn2RWAuWw+zKPWerVXXY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","BrowserRouter","Router","Routes","Route","Navigate","Link","useLocation","Dashboard","SpillForm","WeatherPanel","DispersionMap","apiService","jsxDEV","_jsxDEV","App","_s","activeSpills","setActiveSpills","allSpills","setAllSpills","selectedSpill","setSelectedSpill","loading","setLoading","emergencyAlert","setEmergencyAlert","systemStatus","setSystemStatus","lastUpdate","setLastUpdate","autoRefresh","setAutoRefresh","calculationsInProgress","Set","calculationTimeouts","Map","loadActiveSpills","refreshInterval","setInterval","unsubscribe","subscribeToUpdates","updates","handleRealTimeUpdates","clearInterval","current","forEach","timeout","clearTimeout","clear","length","update","type","prev","data","showNotification","name","map","spill","id","spillId","status","newStatus","updatedAt","Date","toISOString","message","showLoadingState","allSpillsData","activeSpillsData","Promise","all","getAllSpills","getActiveSpills","allSpillsArray","Array","isArray","activeSpillsArray","activeSpillsList","filter","checkForEmergencyConditions","error","console","demoSpills","chemicalType","volume","latitude","longitude","spillTime","now","priority","source","reporterName","reporterContact","spills","criticalSpills","toLowerCase","includes","chemicalData","hazardClass","alertMessage","log","toUpperCase","setTimeout","alert","handleSpillCreated","newSpill","exists","some","handleSpillSelected","handleSpillUpdated","updatedSpill","handleCalculateDispersion","simulationHours","has","get","delete","add","result","calculateDispersion","dispersionData","lastCalculated","handleStatusUpdate","updateSpillStatus","getSystemStatusClass","getSystemStatusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toLocaleTimeString","checked","onChange","e","target","disabled","path","element","onSpillSelect","onCreate","onStatusUpdate","onSpillCreated","to","replace","_c","$RefreshReg$"],"sources":["C:/water/chemical-dispersion-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, Link, useLocation } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport SpillForm from './components/Forms/SpillForm';\nimport WeatherPanel from './components/Weather/WeatherPanel';\nimport DispersionMap from './components/Map/DispersionMap';\nimport { apiService } from './services/api';\nimport './App.css';\n\nfunction App() {\n    const [activeSpills, setActiveSpills] = useState([]);\n    const [allSpills, setAllSpills] = useState([]);\n    const [selectedSpill, setSelectedSpill] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [emergencyAlert, setEmergencyAlert] = useState(null);\n    const [systemStatus, setSystemStatus] = useState('online');\n    const [lastUpdate, setLastUpdate] = useState(null);\n    const [autoRefresh, setAutoRefresh] = useState(true);\n    \n    // FIXED: Track calculations in progress to prevent infinite loops\n    const calculationsInProgress = useRef(new Set());\n    const calculationTimeouts = useRef(new Map());\n\n    // Load initial data and set up auto-refresh\n    useEffect(() => {\n        loadActiveSpills();\n        \n        // Set up auto-refresh interval\n        let refreshInterval;\n        if (autoRefresh) {\n            refreshInterval = setInterval(() => {\n                loadActiveSpills(false); // Silent refresh\n            }, 60000); // Refresh every minute\n        }\n\n        // Set up real-time updates subscription\n        const unsubscribe = apiService.subscribeToUpdates((updates) => {\n            handleRealTimeUpdates(updates);\n        });\n\n        return () => {\n            if (refreshInterval) clearInterval(refreshInterval);\n            if (unsubscribe) unsubscribe();\n            // Clear any pending calculation timeouts\n            calculationTimeouts.current.forEach(timeout => clearTimeout(timeout));\n            calculationTimeouts.current.clear();\n        };\n    }, [autoRefresh]);\n\n    // Handle real-time updates\n    const handleRealTimeUpdates = useCallback((updates) => {\n        if (updates && updates.length > 0) {\n            updates.forEach(update => {\n                switch (update.type) {\n                    case 'spill_created':\n                        setActiveSpills(prev => [...prev, update.data]);\n                        setAllSpills(prev => [...prev, update.data]);\n                        showNotification(`New spill reported: ${update.data.name}`, 'info');\n                        break;\n                    case 'spill_updated':\n                        setActiveSpills(prev => \n                            prev.map(spill => \n                                spill.id === update.data.id ? { ...spill, ...update.data } : spill\n                            )\n                        );\n                        setAllSpills(prev => \n                            prev.map(spill => \n                                spill.id === update.data.id ? { ...spill, ...update.data } : spill\n                            )\n                        );\n                        break;\n                    case 'spill_status_changed':\n                        setActiveSpills(prev => \n                            prev.map(spill => \n                                spill.id === update.spillId ? \n                                { ...spill, status: update.newStatus, updatedAt: new Date().toISOString() } : spill\n                            )\n                        );\n                        if (update.newStatus === 'CONTAINED') {\n                            showNotification(`Spill ${update.spillId} marked as contained`, 'success');\n                        }\n                        break;\n                    case 'emergency_alert':\n                        setEmergencyAlert(update.message);\n                        showNotification(update.message, 'error');\n                        break;\n                    default:\n                        break;\n                }\n            });\n        }\n    }, []);\n\n    // Load active spills data\n    const loadActiveSpills = async (showLoadingState = true) => {\n        try {\n            if (showLoadingState) {\n                setLoading(true);\n            }\n            setSystemStatus('loading');\n\n            const [allSpillsData, activeSpillsData] = await Promise.all([\n                apiService.getAllSpills(),\n                apiService.getActiveSpills()\n            ]);\n\n            // Ensure arrays\n            const allSpillsArray = Array.isArray(allSpillsData) ? allSpillsData : [];\n            const activeSpillsArray = Array.isArray(activeSpillsData) ? activeSpillsData : [];\n            \n            // Filter active spills from all spills if needed\n            const activeSpillsList = activeSpillsArray.length > 0 ? \n                activeSpillsArray : \n                allSpillsArray.filter(spill => \n                    spill.status === 'ACTIVE' || spill.status === 'CONTAINED'\n                );\n\n            setAllSpills(allSpillsArray);\n            setActiveSpills(activeSpillsList);\n            setLastUpdate(new Date());\n            setSystemStatus('online');\n\n            // Check for emergency level spills\n            checkForEmergencyConditions(activeSpillsList);\n\n        } catch (error) {\n            console.error('Error loading spills:', error);\n            setSystemStatus('error');\n            showNotification('Failed to load spill data. Using offline mode.', 'warning');\n            \n            // Try to use cached data or show empty state\n            if (activeSpills.length === 0 && allSpills.length === 0) {\n                // Load demo data for development\n                const demoSpills = [\n                    {\n                        id: 'demo-1',\n                        name: 'Demo Oil Spill',\n                        chemicalType: 'Crude Oil',\n                        volume: 5000,\n                        latitude: 29.7604,\n                        longitude: -95.3698,\n                        spillTime: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\n                        status: 'ACTIVE',\n                        priority: 'HIGH',\n                        source: 'Pipeline Leak',\n                        reporterName: 'System Demo',\n                        reporterContact: 'demo@system.com'\n                    }\n                ];\n                setAllSpills(demoSpills);\n                setActiveSpills(demoSpills);\n            }\n        } finally {\n            if (showLoadingState) {\n                setLoading(false);\n            }\n        }\n    };\n\n    // Check for emergency conditions\n    const checkForEmergencyConditions = (spills) => {\n        const criticalSpills = spills.filter(spill => \n            spill.volume > 10000 || \n            spill.chemicalType.toLowerCase().includes('toxic') ||\n            spill.priority === 'CRITICAL' ||\n            (spill.chemicalData && spill.chemicalData.hazardClass && \n             spill.chemicalData.hazardClass.toLowerCase().includes('hazard'))\n        );\n\n        if (criticalSpills.length > 0) {\n            const alertMessage = `${criticalSpills.length} critical incident(s) detected requiring immediate attention!`;\n            setEmergencyAlert(alertMessage);\n        } else {\n            setEmergencyAlert(null);\n        }\n    };\n\n    // Show notification (could be replaced with a proper notification system)\n    const showNotification = (message, type = 'info') => {\n        console.log(`[${type.toUpperCase()}] ${message}`);\n        // For now, show critical notifications as alerts\n        if (type === 'error') {\n            setTimeout(() => {\n                alert(message);\n            }, 100);\n        }\n    };\n\n    // Handle spill creation\n    const handleSpillCreated = useCallback((newSpill) => {\n        setActiveSpills(prev => {\n            // Avoid duplicates\n            const exists = prev.some(spill => spill.id === newSpill.id);\n            if (exists) {\n                return prev.map(spill => spill.id === newSpill.id ? newSpill : spill);\n            }\n            return [...prev, newSpill];\n        });\n\n        setAllSpills(prev => {\n            const exists = prev.some(spill => spill.id === newSpill.id);\n            if (exists) {\n                return prev.map(spill => spill.id === newSpill.id ? newSpill : spill);\n            }\n            return [...prev, newSpill];\n        });\n\n        setSelectedSpill(newSpill);\n        showNotification(`New spill reported: ${newSpill.name}`, 'success');\n\n        // Check if this creates an emergency condition\n        checkForEmergencyConditions([...activeSpills, newSpill]);\n    }, [activeSpills]);\n\n    // Handle spill selection\n    const handleSpillSelected = useCallback((spill) => {\n        setSelectedSpill(spill);\n    }, []);\n\n    // Handle spill updates\n    const handleSpillUpdated = useCallback((updatedSpill) => {\n        setActiveSpills(prev => \n            prev.map(spill => spill.id === updatedSpill.id ? updatedSpill : spill)\n        );\n        setAllSpills(prev => \n            prev.map(spill => spill.id === updatedSpill.id ? updatedSpill : spill)\n        );\n\n        if (selectedSpill && selectedSpill.id === updatedSpill.id) {\n            setSelectedSpill(updatedSpill);\n        }\n        showNotification(`Spill ${updatedSpill.name} updated`, 'info');\n    }, [selectedSpill]);\n\n    // FIXED: Handle dispersion calculation with proper debouncing and deduplication\n    const handleCalculateDispersion = useCallback(async (spillId, simulationHours = 24) => {\n        // Prevent multiple calculations for the same spill\n        if (calculationsInProgress.current.has(spillId)) {\n            console.log(`[SKIP] Calculation already in progress for spill ${spillId}`);\n            return;\n        }\n\n        // Clear any existing timeout for this spill\n        if (calculationTimeouts.current.has(spillId)) {\n            clearTimeout(calculationTimeouts.current.get(spillId));\n            calculationTimeouts.current.delete(spillId);\n        }\n\n        // Add to in-progress set\n        calculationsInProgress.current.add(spillId);\n\n        try {\n            console.log(`[STARTING] Dispersion calculation for spill ${spillId}`);\n            \n            const result = await apiService.calculateDispersion(spillId, simulationHours);\n            \n            // Update the spill with dispersion data\n            setActiveSpills(prev => \n                prev.map(spill => \n                    spill.id === spillId ? \n                    { \n                        ...spill, \n                        dispersionData: result.dispersionData,\n                        lastCalculated: new Date().toISOString() \n                    } : spill\n                )\n            );\n\n            setAllSpills(prev => \n                prev.map(spill => \n                    spill.id === spillId ? \n                    { \n                        ...spill, \n                        dispersionData: result.dispersionData,\n                        lastCalculated: new Date().toISOString() \n                    } : spill\n                )\n            );\n            \n            console.log(`[SUCCESS] Dispersion calculation completed for ${spillId}`);\n            showNotification('Dispersion calculation completed', 'success');\n            return result;\n        } catch (error) {\n            console.error(`[ERROR] Dispersion calculation failed for ${spillId}:`, error);\n            showNotification('Dispersion calculation failed', 'error');\n            throw error;\n        } finally {\n            // Remove from in-progress set\n            calculationsInProgress.current.delete(spillId);\n        }\n    }, []);\n\n    // Handle status updates\n    const handleStatusUpdate = async (spillId, newStatus) => {\n        try {\n            await apiService.updateSpillStatus(spillId, newStatus);\n            \n            setActiveSpills(prev => \n                prev.map(spill => \n                    spill.id === spillId ? \n                    { ...spill, status: newStatus, updatedAt: new Date().toISOString() } : spill\n                )\n            );\n\n            setAllSpills(prev => \n                prev.map(spill => \n                    spill.id === spillId ? \n                    { ...spill, status: newStatus, updatedAt: new Date().toISOString() } : spill\n                )\n            );\n            \n            showNotification(`Spill status updated to ${newStatus}`, 'success');\n        } catch (error) {\n            console.error('Error updating spill status:', error);\n            showNotification('Failed to update spill status', 'error');\n        }\n    };\n\n    // System status indicator\n    const getSystemStatusClass = () => {\n        switch (systemStatus) {\n            case 'online': return 'status-online';\n            case 'loading': return 'status-loading';\n            case 'error': return 'status-error';\n            default: return 'status-unknown';\n        }\n    };\n\n    const getSystemStatusText = () => {\n        switch (systemStatus) {\n            case 'online': return 'System Online';\n            case 'loading': return 'Updating...';\n            case 'error': return 'Connection Issue';\n            default: return 'Unknown Status';\n        }\n    };\n\n    // Loading screen\n    if (loading) {\n        return (\n            <div className=\"app-loading\">\n                <div className=\"loading-container\">\n                    <div className=\"loading-spinner\"></div>\n                    <h2>Loading Chemical Dispersion Monitor</h2>\n                    <p>Initializing monitoring systems and data sources...</p>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"App\">\n            {/* Emergency Alert Banner */}\n            {emergencyAlert && (\n                <div className=\"emergency-alert\">\n                    <div className=\"alert-content\">\n                        <span className=\"alert-icon\">⚠️</span>\n                        <span className=\"alert-message\">{emergencyAlert}</span>\n                        <button \n                            className=\"alert-close\" \n                            onClick={() => setEmergencyAlert(null)}\n                            aria-label=\"Close alert\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                </div>\n            )}\n\n            {/* System Status Bar */}\n            <div className=\"system-status-bar\">\n                <div className=\"status-info\">\n                    <span className={`status-indicator ${getSystemStatusClass()}`}></span>\n                    <span className=\"status-text\">{getSystemStatusText()}</span>\n                    {lastUpdate && (\n                        <span className=\"last-update\">\n                            Last Update: {lastUpdate.toLocaleTimeString()}\n                        </span>\n                    )}\n                </div>\n                <div className=\"system-controls\">\n                    <label className=\"auto-refresh-toggle\">\n                        <input\n                            type=\"checkbox\"\n                            checked={autoRefresh}\n                            onChange={(e) => setAutoRefresh(e.target.checked)}\n                        />\n                        Auto Refresh\n                    </label>\n                    <button \n                        className=\"refresh-button\"\n                        onClick={() => loadActiveSpills(true)}\n                        disabled={systemStatus === 'loading'}\n                    >\n                        🔄 Refresh\n                    </button>\n                </div>\n            </div>\n\n            <Router>\n                <Routes>\n                    <Route \n                        path=\"/\" \n                        element={\n                            <Dashboard \n                                spills={allSpills}\n                                activeSpills={activeSpills}\n                                onSpillSelect={handleSpillSelected}\n                                onCreate={handleSpillCreated}\n                                onStatusUpdate={handleStatusUpdate}\n                                systemStatus={systemStatus}\n                            />\n                        } \n                    />\n                    <Route \n                        path=\"/spill\" \n                        element={\n                            <SpillForm \n                                onSpillCreated={handleSpillCreated}\n                            />\n                        } \n                    />\n                    <Route \n                        path=\"/map\" \n                        element={\n                            <DispersionMap \n                                spills={allSpills}\n                                activeSpills={activeSpills}\n                                selectedSpill={selectedSpill}\n                                onSpillSelect={handleSpillSelected}\n                                calculateDispersion={handleCalculateDispersion}\n                                onStatusUpdate={handleStatusUpdate}\n                            />\n                        } \n                    />\n                    <Route \n                        path=\"/weather\" \n                        element={<WeatherPanel />} \n                    />\n                    <Route \n                        path=\"*\" \n                        element={<Navigate to=\"/\" replace />} \n                    />\n                </Routes>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}